  #!/usr/bin/env octaspire-dern-repl
  This is a multiline comment.    !#

  ; 1. Print once 'Hello, World!' and newline
  (println [Hello, World!])
  (println)

  ; 2. Print 11 times 'Hello x World!', x is 0 .. 10
  (for i from {D+0} to {D+10}
    (println [Hello {} World!] i))
  (println)

  ; 3. Print greetings to everybody on the vector
  (define names as '(John Alice Mark) [Greetings list])
  (for i in names (println [Happy holidays, {}!] i))
  (println)

  ; 4. Add new name, 'Lola', to the names to be greeted
  (+= names 'Lola)
  (for i in names (println [Happy holidays, {}!] i))
  (println)

  ; 5. Remove one name, 'Mark'
  (-= names 'Mark)
  (for i in names (println [Happy holidays, {}!] i))
  (println)

  ; 6. Define new function to greet people and use it
  (define greeter as (fn (greeting name)
      (println [{}, {}!] greeting name))
    [My greeter function] '(greeting [the greeting]
                            name [who to greet])
                            howto-no)

  (greeter 'Hi 'Alice)

  ; 7. Redefine greeter-function with early exit
  ; using 'return'
  (define grumpy as true [is our hero grumpy, or not])

  (define greeter as (fn (greeting name)
      (if grumpy (return [I'm grumpy and don't greet]))
      (println [{}, {}!] greeting name)
      (string-format [I greeted "{}", as asked] name))
    [My greeter function] '(greeting [the greeting]
                            name [who to greet])
                            howto-no)

  (println (greeter 'Hi 'Alice))
  (= grumpy false)
  (println (greeter 'Hi 'Alice))
  (println)

  ; 8. Add names and custom greetings into a hash map
  ; and use it to greet people
  (define names as (hash-map 'John 'Hi
                             'Lola 'Hello
                             'Mike 'Bonjour)
                          [My custom greetings])

  (for i in names (greeter (ln@ i {D+1}) (ln@ i {D+0})))

  (+ 1.0.0 0.0.1) ; 1.0.1
  (< 1.0.0 1.0.1) ; true
  (> 1.0.0 1.0.1) ; false
