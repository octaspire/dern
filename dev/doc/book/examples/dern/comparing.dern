(<  {D+1} {D+2})   ; true
(<  {D+2} {D+2})   ; false
(>  {D+2} {D+1})   ; true
(<= {D+1} {D+1})   ; true
(>= {D+1} {D+1})   ; true
(== {D+3} {D+3})   ; true
(== {D+3} {D+1})   ; false
(!= {D+3} {D+1})   ; true
(+ {D+1})      ;  1
(+ {D+1} {D+1})    ;  2
(- {D+1})      ; -1
(- {D+1} {D+2} {D+3})  ; -4

(not true)     ; false

(uid +)        ; unique id of +
(=== + +)      ; compare using unique id

(len '({D+1} {D+2} {D+3}))  ; length of vector:   3
(len [abc])                 ; length of string:   3
(len (hash-map {D+1} |a|))  ; length of hash-map: 1

(define number as {D+1} [my number])
(++ number)                      ; number is 2
(-- number)                      ; number is 1
(+= number {D+2})                ; number is 3

(+ [Hello] [ ] [World.] [ Bye.]) ; Hello World. Bye.

(define greeting as [Hello] [my greeting])
(+= greeting [ World!])          ; Hello World!
(+= greeting |!|)                ; Hello World!!

(+= '({D+1} {D+2} {D+3}) '({D+4} {D+5} {D+6}))
; (1 2 3 (4 5 6))

(define capitals as (hash-map [United Kingdom]
                                [London]
                              [Spain] [Madrid])
    [country -> capital])
(+= capitals [Nepal] [Kathmandu])
(+= capitals '([Norway] [Oslo] [Poland] [Warsaw]))
(+= capitals (hash-map [Peru] [Lima]))

(-= {D+10} {D+1} {D+2} {D+3})             ; 4
(-= |x| {D+2})                            ; |v|
(-= |x| |!|)                              ; |W|
(-= [abba] |a|)                           ; [bb]

(-= (hash-map {D+1} |a| {D+2} |b|) {D+1})
; (hash-map 2 |b|)

(-= '({D+1} {D+1} {D+2} {D+2} {D+3}) {D+1} {D+2})
; (3)

(define v as '({D+1} {D+2} {D+3} {D+3}) [v])
(-= v (ln@ v {D-1}))             ; (1 2)

(define v as '({D+1} {D+2} {D+3} {D+3}) [v])
(-== v (ln@ v {D-1}))            ; (1 2 3)