(require 'dern_ncurses)
(require 'dern_socket)

(define win [win] (ncurses-initscr))
(ncurses-set-keypad win true)
(ncurses-set-cbreak true)

(define running [should this program be running] true)
(define current-channel [currently joined channel] nil)
(define socket [socket] nil)
(define num-rows-and-cols [number of rows and cols on screen] (ncurses-getmaxyx win))
(define maxlines [maxlines] (- (nth 0 num-rows-and-cols) 4))
(define lines [messages] (queue-with-max-length maxlines))
(define hint [hint] [])
(define debug [is debug mode on] false)

(define leave-current-channel [leave the current channel] '() (fn ()
    (define message [message] (string-format [PART {}|newline|] current-channel))
    (socket-send socket message)))

(define substr [substr] '(str [str] startIndex [startIndex]) (fn (str startIndex)
    (define result [result] [])

    (if (>= startIndex (len str)) (return result))

    (for i from startIndex to (- (len str) 1)
         (+= result (nth i str)))
    result))

(define handle-nick [handle /nick] '(line [line of text starting with /nick]) (fn (line)
    (define nick [nick] (substr line 6))

    (define message [message] (string-format [NICK {}|newline|] nick))
    (socket-send socket message)))

(define handle-join [handle /join] '(line [line of text starting with /join]) (fn (line)
    (define channel [channel] (substr line 6))

    (define message [message] (string-format [JOIN {}|newline|] channel))
    (socket-send socket message)

    (= current-channel channel)))

(define set-hint [set-hint] '(h [new hint]) (fn (h)
    (= hint h)))

(define handle-connect [handle /connect] '(line [line of text starting with /connect]) (fn (line)
    (define restOfLine [line without /connect] (substr line 9))

    (define tokens [line split by space] (split restOfLine | |))

    (define address [address] [localhost])
    (define portnum [portnum] 6667)

    (if (>= (len tokens) 1) (= address (nth 0 tokens)))
    (if (>= (len tokens) 2) (= portnum (nth 1 tokens)))

    (= portnum (to-integer portnum))

    ; Sockets cannot be copied with '='
    (define (env-global) socket [socket] (socket-new-ipv4-stream-socket address portnum))
    (set-hint (string-format [connected to {} at port {}] address portnum))))

(define handle-user [handle /user] '(line [line of text starting with /user]) (fn (line)
    (define restOfLine [line without /user] (substr line 6))

    (define tokens [line split by space] (split restOfLine | |))

    (define username [username] (nth 0 tokens))
    (define realname [realname] [])

    (if (> (len tokens) 1)
        (for i from 1 to (- (len tokens) 1)
             (+= realname (nth i tokens))
             (+= realname | |)))

    (socket-send socket (string-format [USER {} 8 * :{}|newline|] username realname))))

(define handle-command [handle command, for example /join] '(line [line of text starting with /]) (fn (line)
    (if (starts-with? line [/quit])    (do (= running false)       (return)))
    (if (starts-with? line [/debug])   (do (= debug (not debug))   (return)))
    (if (starts-with? line [/connect]) (do (handle-connect line)   (return)))

    (if (== socket nil) (do (set-hint [You must connect first])    (return)))

    (if (starts-with? line [/user])    (do (handle-user    line)   (return)))
    (if (starts-with? line [/nick])    (do (handle-nick    line)   (return)))
    (if (starts-with? line [/join])    (do (handle-join    line)   (return)))
    (if (starts-with? line [/part])    (do (leave-current-channel) (return)))

    (set-hint (string-format [Unknown command "{}"] line))))

(define handle-message [handle a line starting without /] '(line [line of text starting with /]) (fn (line)
    (if (== nil current-channel)
      (do
        (set-hint [You must enter a channel first])
        (return)))

    (define message [message] (string-format [PRIVMSG {} :{}|newline|] current-channel line))
    (socket-send socket message)
    (push-text-to-lines (string-format [<{}>|newline|{}|newline|] [You] line))))

(define show-hint [show help message] '(hint [hint message]) (fn (hint)
    (ncurses-print win (- (nth 0 num-rows-and-cols) 1) 0 hint)
))

(define show-empty-hint [show empty hint line] '() (fn ()
    (define message [message] [])

    (if debug
      (do
        (+= message [---debug])
        (for i from 8 to (nth 1 num-rows-and-cols) (+= message |-|)))
      (for i from 0 to (nth 1 num-rows-and-cols) (+= message |-|)))

    (set-hint message)))

(define read-and-handle-input [get user input and handle it] '() (fn ()
    (ncurses-print win (- (nth 0 num-rows-and-cols) 2) 0 [> ])
    (define input [line of text from the user] (ncurses-getstr 2.0))

    (if (== 0 (len input)) (do (show-empty-hint) (return)))

    (define first-char [first character of user input] (nth 0 input))

    (if (== |/| first-char)
      (handle-command input)
      (handle-message input))))

(define handle-ping [handle PING message from the IRC server] '(message [message]) (fn (message)
    (= message 1 |O|)
    (+= lines message) ; TODO remove
    (socket-send socket message)))

(define push-text-to-lines [push text to lines] '(text [text]) (fn (text)
    (define line [tmp line] [])

    (if (== 0 (len text)) (return))

    (for i from 0 to (- (len text) 1)
         (define c [c] (nth i text))
         (if (== c |newline|)
            (do (+= lines line)
                (=  line  []))
            (+= line c))
         (if (>= (len line) (nth 1 num-rows-and-cols))
           (do
             (+= lines line)
             (= line []))))

    (if (> (len lines) 0)
        (do (+= lines line)))))

(define extract-only-message-from-input [get only the actual message] '(message [message]) (fn (message)

    (define result [result] [])
    (define numsyms [number of syms] 0)

    (for i from 0 to (- (len message) 1)
        (define c [c] (nth i message))
        (if (>= numsyms 2)
          (+= result c)
          (if (== c |:|) (++ numsyms))))

    (if (>= numsyms 2) result message)))

(define read-socket [read input from socket, if available] '() (fn ()
    (if (== socket nil) (return))

    (define input-from-socket [possible input from socket] (socket-receive socket false))

    (if (== nil input-from-socket) (return))

    (if debug (push-text-to-lines input-from-socket))

    (define first-char [first character of user input] (nth 0 input-from-socket))

    (if (== |P| first-char)
        (return (handle-ping input-from-socket)))

    (define tokens [line split by space] (split input-from-socket | |))

    (define command [command] [])

    (if (>= (len tokens) 2) (= command (nth 1 tokens)))

    (if (== command [PRIVMSG])
      (do
        (define receiver [channel or user] [])
        (define sender   [message is from] [])
        (if (>= (len tokens) 1) (= sender (substr (nth 0 tokens) 1)))
        (if (>= (len tokens) 3) (= receiver (nth 2 tokens)))
        (if (== receiver current-channel)
          (do
            (push-text-to-lines (string-format [<{}>] sender))
            (if (> (len sender) 0)
              (push-text-to-lines (extract-only-message-from-input input-from-socket))
              (push-text-to-lines input-from-socket)))
          (do
            ; TODO check the nick?
            (push-text-to-lines (string-format [PRIVATE <{}>] sender))
            (if (> (len sender) 0)
              (push-text-to-lines (extract-only-message-from-input input-from-socket))
              (push-text-to-lines input-from-socket))))
        (return)))

    (push-text-to-lines input-from-socket)))

(define print-lines [print messages] '() (fn ()
    (show-hint hint)

    (define row [current row] 1)
    (for line in lines
         (ncurses-print win row 1 line)
         (++ row))))

(show-empty-hint)

(while running
    (read-socket)
    (read-and-handle-input)
    (ncurses-clear win)
    (print-lines))

(ncurses-endwin)

