(require 'dern_ncurses)
(require 'dern_socket)

(define win [win] (ncurses-initscr))
(ncurses-set-keypad win true)
(ncurses-set-cbreak true)

(define running [should this program be running] true)
(define current-channel [currently joined channel] nil)
(define socket [socket] (socket-new-ipv4-stream-socket [localhost] 6667))
(define num-rows-and-cols [number of rows and cols on screen] (ncurses-getmaxyx win))
(define lines [messages] (queue-with-max-length (- (nth 0 num-rows-and-cols) 4)))

(define leave-current-channel [leave the current channel] '() (fn ()
    (define message [message] (string-format [PART {}|newline|] current-channel))
    (socket-send socket message)
))

(define substr [substr] '(str [str] startIndex [startIndex]) (fn (str startIndex)
    (define result [result] [])
    (for i from startIndex to (- (len str) 1)
         (+= result (nth i str)))
    result
))

(define handle-nick [handle /nick] '(line [line of text starting with /nick]) (fn (line)
    (define nick [nick] (substr line 6))

    (define message [message] (string-format [NICK {}|newline|] nick))
    (socket-send socket message)
))

(define handle-join [handle /join] '(line [line of text starting with /join]) (fn (line)
    (define channel [channel] (substr line 6))

    (define message [message] (string-format [JOIN {}|newline|] channel))
    (socket-send socket message)

    (= current-channel channel)
))

(define handle-command [handle command, for example /join] '(line [line of text starting with /]) (fn (line)
    (if (starts-with? line [/nick])  (handle-nick line))
    (if (starts-with? line [/join])  (handle-join line))
    (if (starts-with? line [/quit])  (= running false))
    (if (starts-with? line [/part])  (leave-current-channel))
))

(define handle-message [handle a line starting without /] '(line [line of text starting with /]) (fn (line)
    (if (== nil current-channel)
      (do
        (ncurses-print win (- (nth 0 num-rows-and-cols) 2) 0 [You must enter a channel first])
        (return)))

    (define message [message] (string-format [PRIVMSG {} :{}|newline|] current-channel line))
    (socket-send socket message)
))

(define read-and-handle-input [get user input and handle it] '() (fn ()
    (ncurses-print win (- (nth 0 num-rows-and-cols) 1) 0 [> ])
    (define input [line of text from the user] (ncurses-getstr 2.0))

    (if (== 0 (len input)) (return))

    (define first-char [first character of user input] (nth 0 input))

    (if (== |/| first-char)
      (handle-command input)
      (handle-message input))
))

(define handle-ping [handle PING message from the IRC server] '(message [message]) (fn (message)
    (= message 1 |O|)
    (+= lines message) ; TODO remove
    (socket-send socket message)
))

(define read-socket [read input from socket, if available] '() (fn ()
    (define input-from-socket [possible input from socket] (socket-receive socket false))

    (if (== nil input-from-socket) (return))

    (define first-char [first character of user input] (nth 0 input-from-socket))

    (if (== |P| first-char)
        (return (handle-ping input-from-socket)))

    #!
    (define line [tmp line] [])
    (for i from 0 to (- (len input-from-socket) 1)
         (+= line (nth i input-from-socket))
         (if (>= (len line) (nth 1 num-rows-and-cols))
           (do
             (+= lines line)
             (= line []))))

    (+= lines line)
    !#
    (+= lines input-from-socket)
))

(define print-lines [print messages] '() (fn ()
    (define row [current row] 1)
    (for line in lines
         (do
           (ncurses-print win row 0 line)
           (++ row)))
))

(socket-send socket [NICK XYZ|newline|])
(socket-send socket [USER xyz 8 * : XY ZZ|newline|])

(while running
    ;(ncurses-clear win)
    (read-socket)
    (read-and-handle-input)
    (ncurses-clear win)
    (print-lines))

