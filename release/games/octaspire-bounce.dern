(require 'dern_chipmunk)
(require 'dern_easing)
(require 'dern_sdl2)
(require 'dern_nuklear)

(sdl2-Init 'VIDEO)

(define bounce-window-width       as {D+800} [window width])
(define bounce-window-height      as {D+600} [window width])
(define bounce-window-zoom        as {D+0.1} [window zoom factor])
(define bounce-last-applied-force as {D+0}   [last applied impulse])

(define bounce-window as
  (sdl2-CreateWindow [octaspire-bounce] 'CENTERED 'CENTERED bounce-window-width bounce-window-height)
  [window])

(define bounce-nuklear-ctx as (nuklear-sdl-init bounce-window) [nuklear context])

(sdl2-glClearColor {D+0} {D+0} {D+0} {D+1})
(sdl2-gl-ortho-line-smooth-enable)

(define bounce-enter-ortho as (fn (zoom)
  (define width  as (/ (* {D+4} bounce-window-width)  (* {D+2} zoom)) [target width])
  (define height as (/ (* {D+4} bounce-window-height) (* {D+2} zoom)) [target width])
  (sdl2-gl-ortho-enter (- width) width (- height) height))
  [enter ortho] '(zoom [zoom factor]) howto-no)

(bounce-enter-ortho bounce-window-zoom)

(define bounce-make-empty-slot as (fn ()
  (hash-map
    'body nil
    'x1   {D+0}
    'y1   {D+0}
    'x2   {D+0}
    'y2   {D+0}
    'hw   {D+0}))
  [make empty slot] '() howto-no)

(define bounce-walls     as '() [all walls in the level])
(define bounce-platforms as '() [all platforms in the level])
(define bounce-slopes    as '() [all slopes in the level])

(define bounce-wall-add as (fn (x1 y1 x2 y2)
  (define slot as (bounce-make-empty-slot) [slot for the wall])
  (define wall as (chipmunk-cpSpaceGetStaticBody bounce-space) [new wall])
  (define wall-shape as
    (chipmunk-cpSegmentShapeNew wall (chipmunk-cpv x1 y1) (chipmunk-cpv x2 y2) {D+0})
    [collision shape for the wall])
  (chipmunk-cpShapeSetFriction wall-shape {D+0.25})
  (chipmunk-cpSpaceAddShape bounce-space wall-shape)
  (= slot 'body wall)
  (= slot 'x1   x1)
  (= slot 'y1   y1)
  (= slot 'x2   x2)
  (= slot 'y2   y2)
  (+= bounce-walls slot))
  [add new wall in the level] '(x1 [x1] y1 [y1] x2 [x2] y2 [y2]) howto-no)

(define bounce-wall-draw as (fn (slot)
  (define wall as (ln@ slot 'body 'hash) [body of the wall])
  (define pos  as (chipmunk-cpBodyGetPosition wall) [position of the wall])
  (define x1   as (ln@ slot 'x1 'hash) [x1 component])
  (define y1   as (ln@ slot 'y1 'hash) [y1 component])
  (define x2   as (ln@ slot 'x2 'hash) [x2 component])
  (define y2   as (ln@ slot 'y2 'hash) [y2 component])

  (sdl2-gl-ortho-line
    (* {D+10} x1)
    (* {D+10} y1)
    (* {D+10} x2)
    (* {D+10} y2)))
  [draw a wall] '(slot [slot containing the wall]) howto-no)

(define bounce-slope-add as (fn (x1 y1 x2 y2)
  (define slot as (bounce-make-empty-slot) [slot for the slope])
  (define body as (chipmunk-cpBodyNewKinematic) [a body])
  (chipmunk-cpSpaceAddBody bounce-space body)
  (define shape as
    (chipmunk-cpSegmentShapeNew body (chipmunk-cpv x1 y1) (chipmunk-cpv x2 y2) {D+0})
    [slope collision shape])
  (chipmunk-cpShapeSetFriction shape {D+0.25})
  (chipmunk-cpSpaceAddShape bounce-space shape)

  (= slot 'body body)
  (= slot 'x1  x1)
  (= slot 'y1  y1)
  (= slot 'x2  x2)
  (= slot 'y2  y2)
  (+= bounce-slopes slot))
  [add new slope in the level] '(x1 [x1] y1 [y1] x2 [x2] y2 [y2]) howto-no)

(define bounce-slope-draw as (fn (slot)
  (define body         as (ln@ slot 'body 'hash) [body of the slope])
  (define pos          as (chipmunk-cpBodyGetPosition body) [position of the slope])
  (define x1           as (* {D+10} (ln@ slot 'x1 'hash))  [x component])
  (define y1           as (* {D+10} (ln@ slot 'y1 'hash))  [y component])
  (define x2           as (* {D+10} (ln@ slot 'x2 'hash))  [x component])
  (define y2           as (* {D+10} (ln@ slot 'y2 'hash))  [y component])
  (sdl2-glColor4ub {X+FF} {X+4F} {X+00} {X+FF})
  (sdl2-gl-ortho-line x1 y1 x2 y2)
  (sdl2-glColor4ub {X+FF} {X+FF} {X+FF} {X+FF}))
  [draw a slope] '(slot [slot containing the slope]) howto-no)

(define bounce-platform-add as (fn (x y w vel-x vel-y max-x max-y)
  (define vel as (chipmunk-cpv vel-x vel-y) [vel])
  (define max as (chipmunk-cpv max-x max-y) [vel])
  (define hw   as (/ w {D+2}) [half width])
  (define slot as (bounce-make-empty-slot) [slot for the platform])
  (define body as (chipmunk-cpBodyNewKinematic) [a body])
  (chipmunk-cpSpaceAddBody bounce-space body)
  (chipmunk-cpBodySetPosition body (chipmunk-cpv x y))
  ; Bottom
  (define shape-bottom as
    (chipmunk-cpSegmentShapeNew body (chipmunk-cpv (- hw) {D+0}) (chipmunk-cpv hw {D+0}) {D+0})
    [platform collision bottom shape])
  (chipmunk-cpShapeSetFriction shape-bottom {D+0.25})
  (chipmunk-cpSpaceAddShape bounce-space shape-bottom)
  ; Right wall
  (define shape-right as
    (chipmunk-cpSegmentShapeNew body (chipmunk-cpv hw {D+1.5}) (chipmunk-cpv hw {D+0}) {D+0})
    [platform collision right side shape])
  (chipmunk-cpShapeSetFriction shape-right {D+0.25})
  (chipmunk-cpSpaceAddShape bounce-space shape-right)
  ; Left wall
  (define shape-left as
    (chipmunk-cpSegmentShapeNew body (chipmunk-cpv (- hw) {D+1.5}) (chipmunk-cpv (- hw) {D+0}) {D+0})
    [platform collision left side shape])
  (chipmunk-cpShapeSetFriction shape-left {D+0.25})
  (chipmunk-cpSpaceAddShape bounce-space shape-left)
  (chipmunk-cpBodySetVelocity body vel)
  (= slot 'body body)
  (= slot 'x1  x)
  (= slot 'y1  y)
  (= slot 'hw  hw)
  (= slot 'vel vel)
  (= slot 'max max)
  (+= bounce-platforms slot))
  [add new platform in the level] '(x [center x] y [center y] w [w] vel-x [velocity x] vel-y [velocity y] max-x [max delta x] max-y [max delta y]) howto-no)

(define bounce-platform-draw as (fn (slot)
  (define body         as (ln@ slot 'body 'hash) [body of the platform])
  (define pos          as (chipmunk-cpBodyGetPosition body) [position of the platform])
  (define x            as (* {D+10} (chipmunk-cpv-get-x pos)) [x component])
  (define y            as (* {D+10} (chipmunk-cpv-get-y pos)) [y component])
  (define hw           as (* {D+10} (ln@ slot 'hw 'hash)) [half width])
  (define wall-y       as (+ {D+15} y) [wall's top y])
  (define left-wall-x  as (- x hw) [left wall's x])
  (define right-wall-x as (+ x hw) [right wall's x])
  (sdl2-glColor4ub {X+FF} {X+4F} {X+00} {X+FF})
  (sdl2-gl-ortho-line left-wall-x  y      right-wall-x y)  ; Bottom
  (sdl2-gl-ortho-line left-wall-x  wall-y left-wall-x  y)  ; Left wall
  (sdl2-gl-ortho-line right-wall-x wall-y right-wall-x y)  ; Right wall
  (sdl2-glColor4ub {X+FF} {X+FF} {X+FF} {X+FF}))
  [draw a platform] '(slot [slot containing the platform]) howto-no)

(define bounce-platform-update as (fn (slot)
  (define body  as (ln@ slot 'body 'hash) [body of the platform])
  (define pos   as (chipmunk-cpBodyGetPosition body) [position of the platform])
  (define vel   as (chipmunk-cpBodyGetVelocity body) [velocity of the platform])
  (define x1    as (ln@ slot 'x1 'hash) [original x])
  (define y1    as (ln@ slot 'y1 'hash) [original y])
  (define max   as (ln@ slot 'max 'hash) [max delta])
  (define max-x as (chipmunk-cpv-get-x max) [max x])
  (define max-y as (chipmunk-cpv-get-y max) [max Y])

  (if (and (!= max-x {D+0}) (>= (distance (chipmunk-cpv-get-x pos) x1) max-x))
    (chipmunk-cpBodySetVelocity body (chipmunk-cpv (- (chipmunk-cpv-get-x vel)) (chipmunk-cpv-get-y vel))))
  (if (and (!= max-y {D+0}) (>= (distance (chipmunk-cpv-get-y pos) y1) max-y))
    (chipmunk-cpBodySetVelocity body (chipmunk-cpv (chipmunk-cpv-get-x vel) (- (chipmunk-cpv-get-y vel))))))
  [update a platform] '(slot [slot containing the platform]) howto-no)

(define bounce-space as nil [chipmunk space])
(define bounce-ball  as nil [the ball])

(define bounce-space-create as (fn ()
  ; TODO FIXME remove the need to call this
  (chipmunk-removeWildCardHandlers)
  (= bounce-ball      nil)
  (= bounce-walls     '())
  (= bounce-platforms '())
  (= bounce-slopes    '())
  (define bounce-space as (chipmunk-cpSpaceNew) [chipmunk space] in (env-global))
  (define gravity as (chipmunk-cpv {D+0} {D-100}) [Gravity vector])
  (chipmunk-cpSpaceSetGravity bounce-space gravity)
  (chipmunk-cpSpaceAddWildCardHandler
    bounce-space
    {D+1}
    (fn (body-a body-b normal first-contact total-ke)
      (if (bounce-ball-platform-collision? body-a body-b)
        (= bounce-ball-on-platform true)) [todo])
    (fn (body-a body-b normal first-contact total-ke)
      (if (bounce-ball-platform-collision? body-a body-b)
        (= bounce-ball-on-platform false)) [todo])))
  [create a new space] '() howto-no)

(define bounce-ball-add as (fn (x y)
  (define bounce-ball as (chipmunk-cpBodyNew {D+1} {D+1}) [the ball body] in (env-global))
  (chipmunk-cpSpaceAddBody bounce-space bounce-ball)
  (define ball-shape as
    (chipmunk-cpCircleShapeNew bounce-ball {D+2.0} (chipmunk-cpv {D+0} {D+0}))
    [ball collision shape])
  (chipmunk-cpShapeSetFriction ball-shape {D+0.25})
  (chipmunk-cpSpaceAddShape bounce-space ball-shape)
  (chipmunk-cpBodySetPosition        bounce-ball (chipmunk-cpv x y))
  (chipmunk-cpBodySetVelocity        bounce-ball (chipmunk-cpv))
  (chipmunk-cpBodySetAngularVelocity bounce-ball {D+0}))
  [stop and position the ball] '(x [new x] y [new y]) howto-no)

#! Level dimensions are about:
   x -155 to 155
   y -115 to 115
!#
(define bounce-level-load-0 as (fn ()
  (bounce-star-location-set {D+147} {D-105})        ; location of the exit
  (bounce-wall-add {D+140} {D-111} {D+154} {D-111}) ; separator below the star
  (bounce-wall-add {D+140} {D-111} {D+140} {D-107}) ; separator left end
  (bounce-wall-add {D+154} {D-111} {D+154} {D-107}) ; separator right end

  (for i from {D+0} to {D+5}
    (bounce-slope-add (+ {D-155} (* i {D+50})) {D+100} (+ {D-125} (* i {D+50})) {D+97})) ; top row

  (bounce-wall-add {D-130} {D+90} {D+70}  {D+92}) ; separator
  (bounce-wall-add {D-130} {D+90} {D-130} {D+94}) ; separator left end
  (bounce-wall-add {D+70}  {D+92} {D+70}  {D+96}) ; separator right end

  (bounce-slope-add {D+95} {D+50} {D+155} {D+60})
  (for i from {D+1} to {D+4}
    (bounce-slope-add (- {D+95} (* i {D+50})) {D+50} (- {D+125} (* i {D+50})) {D+53}))   ; 2. row
  (bounce-slope-add {D-155} {D+60} {D-125} {D+40})

  (bounce-wall-add {D-100} {D+40} {D+110} {D+40}) ; separator
  (bounce-wall-add {D-100} {D+40} {D-100} {D+44}) ; separator left end
  (bounce-wall-add {D+110} {D+40} {D+110} {D+44}) ; separator right end

  (bounce-slope-add {D+45} {D+0} {D+75} {D-4})
  (for i from {D+2} to {D+4}
    (bounce-slope-add (- {D+95} (* i {D+50})) {D+0} (- {D+125} (* i {D+50})) {D+0}))   ; 3. row

  (bounce-wall-add {D-100} {D-10} {D+70}  {D-10}) ; separator
  (bounce-wall-add {D-100} {D-10} {D-100} {D-6})  ; separator left end
  (bounce-wall-add {D+70}  {D-10} {D+70}  {D-6})  ; separator right end

  (bounce-ball-add  {D-154} {D+120}))
  [load a level] '() howto-no)

(define bounce-level-load-1 as (fn ()
  (bounce-star-location-set {D+147} {D+110}) ; location of the exit
  ; pipe1
  (bounce-wall-add     {D-155} {D+100} {D-155} {D-115}) ; left wall
  (bounce-wall-add     {D-154} {D+10}  {D-150} {D+15})  ; lower left ramp wall
  (bounce-wall-add     {D-140} {D+85}  {D-136} {D+70})  ; upper right ramp wall
  (bounce-wall-add     {D-154} {D+110} {D-150} {D+115}) ; ramp to pipe2
  (bounce-wall-add     {D-135} {D+100} {D-135} {D-115}) ; right wall
  (bounce-platform-add {D-138} {D+20}  {D+4}   {D+0}  {D+20} {D+0} {D+30})  ; upper  platform
  (bounce-platform-add {D-145} {D-30}  {D+4}   {D+15} {D+0}  {D+6} {D+0})  ; middle platform
  (bounce-platform-add {D-145} {D-90}  {D+8}   {D+0}  {D+30} {D+0} {D+30}) ; bottom platform
  (bounce-ball-add     {D-145} {D-40})
  ; pipe2
  (bounce-wall-add     {D-115} {D+155} {D-115} {D-100}) ; right wall
  (bounce-platform-add {D-125} {D+55}  {D+4}   {D+10} {D+0}  {D+8}{D+0})   ; upper horizontal platform
  (bounce-platform-add {D-132} {D-60}  {D+4}   {D+0}  {D+20} {D+0} {D+30}) ; upper vertical platform
  (bounce-platform-add {D-119} {D-115} {D+8}   {D+10} {D+0}  {D+12}{D+0})  ; lower horizontal platform
  (bounce-wall-add     {D-115} {D+95}  {D-120} {D+90}) ; upper triangle ramp
  (bounce-wall-add     {D-115} {D+85}  {D-120} {D+90}) ; upper triangle ramp
  (bounce-wall-add     {D-135} {D+75}  {D-130} {D+70}) ; upper left ramp
  ; pipe3
  (bounce-platform-add {D-105} {D+40}  {D+8}   {D+0}  {D+20} {D+0}{D+10}) ; top platform
  (bounce-platform-add {D-102} {D-30}  {D+4}   {D+10} {D+0}  {D+5}{D+0})  ; middle platform
  (bounce-wall-add     {D-115} {D+110} {D-105} {D+120})  ; left top ramp
  (bounce-wall-add     {D-100} {D+70}  {D-95}  {D+75})  ; right triangle ramp, top
  (bounce-wall-add     {D-100} {D+70}  {D-95}  {D+65})  ; right triangle ramp, bottom
  (bounce-wall-add     {D-115} {D+0}   {D-110} {D+5})   ; middle ramp
  (bounce-wall-add     {D-95}  {D+100} {D-95}  {D-115}) ; right wall
  (bounce-wall-add     {D-115} {D-100} {D-110} {D-95})  ; lowest left ramp
  (bounce-wall-add     {D-100} {D-80}  {D-95}  {D-95})  ; lowest right ramp
  (bounce-platform-add {D-112} {D-85}  {D+4}   {D+0} {D+0} {D+1}{D+0}) ; lowest static platform
  ; pipe4
  (bounce-wall-add     {D-75} {D+155} {D-75}  {D-100})  ; right wall
  (bounce-wall-add     {D-75} {D+110} {D-65}  {D+120})  ; left top ramp
  (bounce-platform-add {D-64} {D+0}   {D+8}   {D+6} {D+0} {D+5}  {D+0}) ; middle platform
  (bounce-platform-add {D-76} {D-115} {D+8}   {D+6} {D+0} {D+15} {D+0}) ; bottom platform
  ; pipe5
  (bounce-wall-add     {D-55} {D+100} {D-55}  {D-115})  ; right wall
  ; pipe6
  (bounce-wall-add     {D-35} {D+155} {D-35}  {D-100})  ; right wall
  (bounce-wall-add     {D-40} {D+70}  {D-35}  {D+65})  ; right ramp
  (bounce-platform-add {D-34} {D-115} {D+8}   {D+26} {D+0} {D+15} {D+0}) ; bottom platform
  ; pipe7
  (bounce-wall-add     {D-15} {D+100}  {D-15}  {D-115}) ; right wall
  (bounce-wall-add     {D-35} {D+112}  {D-15}  {D+118}) ; left upper ramp
  (bounce-wall-add     {D-23} {D+80}   {D-15}  {D+75})  ; right upper ramp
  (bounce-platform-add {D-30} {D+60}   {D+8}   {D+0} {D-40} {D+0} {D+40}) ; top platform
  (bounce-wall-add     {D-35} {D+10}   {D-27}  {D+15})  ; left middle ramp
  (bounce-platform-add {D-20} {D-10}   {D+8}   {D+0} {D-40} {D+0} {D+40}) ; middle platform
  (bounce-wall-add     {D-20} {D-50}   {D-15}  {D-55})  ; right bottom ramp
  (bounce-platform-add {D-30} {D-60}   {D+8}   {D+0} {D-40} {D+0} {D+40}) ; bottom platform
  (bounce-wall-add     {D+17}  {D+80}  {D+80}  {D+60})  ; long ramp at top right
  (bounce-wall-add     {D+80}  {D+80}  {D+100} {D+100}) ; ramp
  (bounce-platform-add {D+90}  {D+55}  {D+20}  {D+0}  {D+0} {D+0}  {D+0}) ; top static platform
  (bounce-platform-add {D+105} {D-115} {D+10}  {D+40} {D+0} {D+50} {D+0})
  ; pipe8
  (bounce-wall-add     {D+135} {D+155} {D+135} {D-100}) ; left wall
  (bounce-wall-add     {D+160} {D+155} {D+160} {D-115}) ; right wall
  (bounce-platform-add {D+140} {D+20}  {D+8}   {D+0} {D+80} {D+0} {D+90}) ; platform
  (bounce-wall-add     {D+150} {D+40}  {D+160} {D+30}))  ; right ramp
  [load a level] '() howto-no)

(define bounce-level-load-2 as (fn ()
  (bounce-star-location-set {D+147} {D-105})        ; location of the exit
  (bounce-wall-add {D+140} {D-111} {D+154} {D-111}) ; separator below the star
  (bounce-wall-add {D+140} {D-111} {D+140} {D-107}) ; separator left end
  (bounce-wall-add {D+154} {D-111} {D+154} {D-107}) ; separator right end

  (for i from {D+0} to {D+5}
    (bounce-slope-add (+ {D-155} (* i {D+50})) {D+100} (+ {D-125} (* i {D+50})) {D+97})) ; top row

  (bounce-ball-add  {D-154} {D+120}))
  [load a level] '() howto-no)

(define bounce-level-load as (fn (index)
  (bounce-space-create)
  (select (== index {D+0}) (bounce-level-load-0)
          (== index {D+1}) (bounce-level-load-1)
          (== index {D+2}) (bounce-level-load-2)))
  [load level having the given index] '(index [index]) howto-no)

(define bounce-level-index as {D+0} [current level index])
(define bounce-level-count as {D+3} [total number of levels])

(define bounce-level-passed as false [is level passed])
(define bounce-pass-star-delta as {D+0} [helper variable for star effect])
(define bounce-pass-star-alpha as {D+0} [helper variable for star effect])

(define bounce-level-pass as (fn ()
  (= bounce-level-passed true)
  (easing-add 'out-expo bounce-pass-star-alpha {X+0} {X+FF}  {D+3} [])
  (easing-add 'out-expo bounce-pass-star-delta {D+0} {D+100} {D+5} [(bounce-level-next)]))
  [show level passed animations] '() howto-no)

(define bounce-level-next as (fn ()
  (++ bounce-level-index)
  (= bounce-level-index (mod bounce-level-index bounce-level-count))
  (= bounce-level-passed false)
  (= bounce-pass-star-delta {D+0})
  (= bounce-pass-star-alpha {D+0})
  (bounce-level-load bounce-level-index))
  [load next level or the first if all passed] '() howto-no)

(define bounce-level-prev as (fn ()
  (-- bounce-level-index)
  (if (< bounce-level-index {D+0}) (= bounce-level-index (- bounce-level-count {D+1})))
  (= bounce-level-passed false)
  (= bounce-pass-star-delta {D+0})
  (= bounce-pass-star-alpha {D+0})
  (bounce-level-load bounce-level-index))
  [load previous level or the last] '() howto-no)

(define bounce-ball-on-platform as false [is ball in contact with a platform])

(define bounce-ball-platform-collision? as (fn (body-a body-b)
  (define type-a as (chipmunk-cpBodyGetType body-a) [type of body-a])
  (define type-b as (chipmunk-cpBodyGetType body-b) [type of body-b])
  (if (and (!= type-a 'KINEMATIC) (!= type-b 'KINEMATIC))
    (return false))
  (if (and (!= bounce-ball body-a) (!= bounce-ball body-b))
    (return false))
  (return true))
  [tell if ball touches a platform] '(body-a [one colliding body] body-b [another colliding body]) howto-no)

(define bounce-running               as true [is running or not])
(define bounce-target-FPS            as {D+100} [target FPS])
(define bounce-target-frame-duration as (/ {D+1.0} bounce-target-FPS) [time for a frame to last])
(define bounce-key-down-duration     as {D+0} [duration of the current keypress, if any])
(define bounce-key-down-time         as {D+0} [when the current keypress, started])

(define bounce-game-over as (fn ()
  (bounce-level-load bounce-level-index))
  [game over] '() howto-no)

(define bounce-game-paused as false [is game paused or not])

(define bounce-game-pause-toggle as (fn ()
  (= bounce-game-paused (not bounce-game-paused)))
  [game over] '() howto-no)

(define bounce-star-angle      as {D+0} [angle of the star])
(define bounce-star-location-x as {D+0} [position of the star])
(define bounce-star-location-y as {D+0} [position of the star])

(define bounce-star-location-set as (fn (x y)
  (= bounce-star-location-x x)
  (= bounce-star-location-y y))
  [set star location] '(x [x] y [y]) howto-no)

(define bounce-duration-to-impulse as (fn ()
  (define bounce-impulse as (/ bounce-key-down-duration {D+3}) [impulse])
  (if (<= bounce-impulse {D+250}) (return bounce-impulse))
  (return {D+250}))
  [calculate impulse for a key down duration] '() howto-no)

(define bounce-render-game as (fn ()
  (define bounce-ball-pos as (chipmunk-cpBodyGetPosition bounce-ball) [position of the ball])
  (define ball-x          as (* {D+10} (chipmunk-cpv-get-x bounce-ball-pos)) [x component])
  (define ball-y          as (* {D+10} (chipmunk-cpv-get-y bounce-ball-pos)) [y component])
  (bounce-enter-ortho bounce-window-zoom)
  (sdl2-glClear)
  ; ball
  (sdl2-glColor4ub {X+FF} {X+FF} {X+00} {X+FF})
  (sdl2-gl-ortho-circle-rotated ball-x ball-y {D+20} {D+32} (chipmunk-cpBodyGetAngle bounce-ball))
  (sdl2-glColor4ub {X+FF} {X+FF} {X+FF} {X+FF})
  ; All walls
  (for i in bounce-walls
    (bounce-wall-draw i))
  ; platforms
  (for i in bounce-platforms
       (bounce-platform-draw i))
  ; slopes
  (for i in bounce-slopes
    (bounce-slope-draw i))
  (sdl2-glColor4ub {X+99} {X+FF} {X+0} {X+FF})
  (sdl2-gl-ortho-star-rotated (* {D+10} bounce-star-location-x) (* {D+10} bounce-star-location-y) {D+40} {D+5} bounce-star-angle)
  (sdl2-glColor4ub {X+FF} {X+FF} {X+FF} {X+FF})
  ; ui
  (if (nuklear-begin bounce-nuklear-ctx [] {D+370} {D+500} {D+155} {D+85})
    (do
      (nuklear-layout-row-static bounce-nuklear-ctx {D+30} {D+130} {D+1})
        (if bounce-game-paused
          (nuklear-label bounce-nuklear-ctx [-- PAUSED --] 'CENTERED)
          (nuklear-label bounce-nuklear-ctx (string-format [Level {}] (+ bounce-level-index {D+1})) 'RIGHT))
      (nuklear-layout-row-static bounce-nuklear-ctx {D+30} {D+130} {D+1})
      (nuklear-progress bounce-nuklear-ctx (bounce-duration-to-impulse) {D+250} false)))
  (nuklear-end bounce-nuklear-ctx))
  [render game] '() howto-no)

(define bounce-render-pass as (fn ()
  (bounce-render-game)
  (define x as (* {D+10} bounce-star-location-x) [x])
  (define y as (* {D+10} bounce-star-location-y) [y])
  (define delta as bounce-pass-star-delta [star movement])
  (define angle as (* {D+0.5} bounce-star-angle) [angle])
  (define num-stars as {D+8} [number of stars])
  (define star-step as (/ {D+6.28318530718} num-stars) [angle per star])
  (sdl2-glColor4ub {X+99} {X+FF} {X+0} bounce-pass-star-alpha)
  (for i from {D+0} to num-stars
    (define tmp-angle as (* i star-step) [angle for this loop iteration])
    (sdl2-gl-ortho-star-rotated (+ x (* delta (cos tmp-angle))) (+ y (* delta (sin tmp-angle))) {D+30} {D+5} angle))
  (sdl2-glColor4ub {X+FF} {X+FF} {X+FF} {X+FF}))
  [render level passed effects] '() howto-no)

(define bounce-render as (fn ()
  (if bounce-level-passed
        (bounce-render-pass)
    (bounce-render-game))
  (nuklear-sdl-render)
  (sdl2-GL-SwapWindow bounce-window))
  [render] '() howto-no)

(bounce-level-load bounce-level-index)

(define bounce-ball-apply-impulse as (fn (force)
  (chipmunk-cpBodyApplyImpulseAtWorldPoint bounce-ball force (chipmunk-cpBodyGetPosition bounce-ball))
  (= bounce-last-applied-force (chipmunk-cpv-get-y force)))
  [apply an impulse on the ball] '(force [force]) howto-no)

#! Currently held jump key or an empty string. Pressing another
   key while a jump key is held down cancels the jump. !#
(define current-jump-key as [] [currently held jump key, if any])

(define bounce-handle-keydown as (fn (event)
  (define key as (ln@ event {D+1}) [key])
  (if (ln@ event {D+4}) (return)) ; don't handle repeat events.
  (if bounce-game-paused
    (do
      (if (== key [p]) (bounce-game-pause-toggle))
      (return)))
  (if (== key [q]) (= bounce-running false))
  (if (== key [r]) (do (bounce-game-over) (return)))
  (if (== key [p]) (do (bounce-game-pause-toggle) (return)))
  (if (== (ln@ event {D+1}) [LEFT])  (if (== (ln@ event {D+2}) [KMOD_LCTRL]) (bounce-level-prev)))
  (if (== (ln@ event {D+1}) [RIGHT]) (if (== (ln@ event {D+2}) [KMOD_LCTRL]) (bounce-level-next)))
  (if (not bounce-ball-on-platform) (return))
  (if (== current-jump-key [])
      (do
        (= current-jump-key key)
        (= bounce-key-down-time (sdl2-GetTicks)))
      (= current-jump-key [])))
  [handle keydown-event] '(event [event]) howto-no)

(define bounce-handle-keyup as (fn (event)
  (define key as (ln@ event {D+1}) [key])
  (if (not bounce-ball-on-platform) (return))
  (if (== key current-jump-key)
      (do
        (= bounce-key-down-duration (- (sdl2-GetTicks) bounce-key-down-time))
        (= current-jump-key [])
        (= bounce-key-down-time {D+0})
        (bounce-ball-apply-impulse (chipmunk-cpv {D+0} (bounce-duration-to-impulse)))
        (= bounce-key-down-duration {D+0}))))
  [handle keydup-event] '(event [event]) howto-no)

(define bounce-is-player-on-star as (fn ()
  (define ball-pos as (chipmunk-cpBodyGetPosition bounce-ball) [position of the ball])
  (define ball-x   as (chipmunk-cpv-get-x ball-pos) [x component])
  (define ball-y   as (chipmunk-cpv-get-y ball-pos) [y component])
  (define distance as (sqrt (+ (pow (- ball-x bounce-star-location-x) {D+2}) (pow (- ball-y bounce-star-location-y) {D+2}))) [distance])
  (<= distance {D+8}))
  [does player touch the star] '() howto-no)

(define bounce-handle-input as (fn ()
  (nuklear-input-begin bounce-nuklear-ctx)
  (define event as (sdl2-PollEvent) [event from sdl2])
  (if (!= event nil)
      (nuklear-sdl-handle-event bounce-nuklear-ctx (ln@ event (- (len event) {D+1}))))
  (nuklear-input-end bounce-nuklear-ctx)
  (define type  as nil [type of event])
  (if (and (!= event nil) (> (len event) {D+0})) (= type (ln@ event {D+0})))
  (if bounce-game-paused
      (do
          (if (== type 'KEYDOWN) (bounce-handle-keydown event))
          (return)))
  (select (== type 'QUIT)    (= bounce-running false)
          (== type 'KEYDOWN) (bounce-handle-keydown event)
          (== type 'KEYUP)   (bounce-handle-keyup   event)))
  [handle input] '() howto-no)

(define bounce-update-game as (fn (dt)
  (bounce-handle-input)
  (if bounce-game-paused (return))
  (if (> bounce-key-down-time {D+0})
    (= bounce-key-down-duration (- (sdl2-GetTicks) bounce-key-down-time))
    (= bounce-key-down-duration {D+0}))
  (+= bounce-star-angle {D+0.02})
  (if (< bounce-window-zoom {D+1}) (+= bounce-window-zoom {D+0.05}))
  (for i in bounce-platforms
    (bounce-platform-update i))
  (chipmunk-cpSpaceStep bounce-space {D+0.01})
  (define ball-pos as (chipmunk-cpBodyGetPosition bounce-ball) [position of the ball])
  (define ball-x   as (chipmunk-cpv-get-x ball-pos) [x component])
  (define ball-y   as (chipmunk-cpv-get-y ball-pos) [y component])
  (if (< ball-y {D-240}) (bounce-game-over))
  ;(if (and (> ball-x {D+135}) (< ball-x {D+160}) (> ball-y {D+130}) (< ball-y {D+160})) (bounce-level-pass)))
  (if (bounce-is-player-on-star) (bounce-level-pass)))
  [update game] '(dt [dt]) howto-no)

(define bounce-update-pass as (fn (dt)
  (if bounce-game-paused (return))
  (easing-update {D+0.02})
  (+= bounce-star-angle {D+0.02}))
  [update level pass effects] '(dt [dt]) howto-no)

(define bounce-update as (fn (dt)
    (if bounce-level-passed
        (bounce-update-pass dt)
      (bounce-update-game dt)))
  [update] '(dt [dt]) howto-no)

(while bounce-running
  (sdl2-TimerUpdate)
  (define dt as (sdl2-TimerGetSeconds) [dt])
  (sdl2-TimerReset)
  (bounce-render)
  (bounce-update dt)
  (sdl2-TimerUpdate)
  (define current-frame-duration as (sdl2-TimerGetSeconds) [current frame duration])
  (if (> bounce-target-frame-duration current-frame-duration) (do
    (define delay-in-seconds as (- bounce-target-frame-duration current-frame-duration) [time to sleep])
    (if (> delay-in-seconds {D+0})
        (sdl2-Delay delay-in-seconds))))
  (= dt (sdl2-TimerGetSeconds)))

(sdl2-Quit)
