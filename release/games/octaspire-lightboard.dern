; WIP conversion into stand alone 100% Dern version is
; not complete yet!
(require 'dern_sdl2)
(require 'dern_easing)
(require 'dern_animation)

(define sdl-init-vec as '(sdl2-Init 'VIDEO) [SDL2 is initialized by evaluating this vector])
(eval sdl-init-vec)

(define window   as (sdl2-CreateWindow [octaspire-lightboard] 'CENTERED 'CENTERED 640 480) [window])
(define renderer as (sdl2-CreateRenderer window -1 'SOFTWARE) [renderer])

(define texture as (sdl2-CreateTexture
        renderer
        'BASE64
        []
        255
        0
        180) [texture])

(define level                as '()                         [level])
(define level-width          as 5                           [number of slots per side])
(define m                    as (- level-width 1)           [max coordinate] )
(define level-length         as (* level-width level-width) [number of slots])
(define level-current-number as nil                         [current level number])

(define origoX                     as 320                              [X-coordinate of center for drawing])
(define origoY                     as 240                              [Y-coordinate of center for drawing])
(define shakeStepsLeft             as 0                                [Times to shake the level])
(define shakeX                     as 0                                [Shake x-coordinate])

(define shake as (fn ()
    (= shakeStepsLeft 20))
  [shake the level] '() howto-no)

(define coordinates-to-index as (fn (x y)
    (+ x (* y level-width)))
  [kkk] '(x [x] y [y]) howto-ok)

(define index-to-x as (fn (index)
    (mod index level-width))
  [kkk] '(index [index]) howto-ok)

(define index-to-y as (fn (index)
    (/ index level-width))
  [kkk] '(index [index]) howto-ok)



(define texture-index-to-x as (fn (index)
        (return (mod (* index 32) 256))) [index-to-x] '(index [index]) howto-ok)

(define texture-index-to-y as (fn (index)
        (return (to-integer (/ (* index 32) 256)))) [index-to-x] '(index [index]) howto-ok)

(define texture-index-to-vec as (fn (index)
        (define result as (vector) [result])
        (+= result (index-to-x index))
        (+= result (index-to-y index))
        (+= result 32)
        (+= result 32)
        (+= result 0)
        (+= result 0)
        (+= result 32)
        (+= result 32)
        (+= result 0.2)
        (return result)
        )
        [Index to texture coordinates] '(index [index]) howto-ok)

(define create-new-anim as (fn (name x y slot index ...)
        (define f as (vector 'animation-add
                              name
                              '(ln@ slot 'sx 'hash)
                              '(ln@ slot 'sy 'hash)
                              '(ln@ slot 'sw 'hash)
                              '(ln@ slot 'sh 'hash)
                              '(ln@ slot 'tx 'hash)
                              '(ln@ slot 'ty 'hash)
                              '(ln@ slot 'tw 'hash)
                              '(ln@ slot 'th 'hash)
                              []
                              0
                              ) [to be evaluated])

        (for i in index
             (+= f (texture-index-to-vec i)))

        (eval f))
        [create new animation from frame indices] '(name [id] x [x] y [y] slot [slot] index [index] ... [varargs]) howto-no)


(define new-anim as (fn (name type x y)
    (animation-remove name)
    (define slot as (level-get-slot x y) [slot at x y])

    (select
        (== type [lock-full-opened]) (create-new-anim name x y slot  16  15 14 13 12 11 10  9  8)
        (== type [lock-half-closed]) (create-new-anim name x y slot   8   9 10 11 12 13 14 15 16)
        (== type [lock-full-closed]) (create-new-anim name x y slot  16  17 18 19 20 21 22 23 24)
        (== type [lock-half-opened]) (create-new-anim name x y slot  24  23 22 21 20 19 18 17 16)
        (== type [slot-covered-on])  (create-new-anim name x y slot  32  33 34 35 36 37 38 39)
        (== type [slot-covered-off]) (create-new-anim name x y slot  39  38 37 36 35 34 33 32)
        (== type [slot-missing])     (create-new-anim name x y slot  40  41 42 43 44 45 46 47)
        (== type [slot-off])         (create-new-anim name x y slot  7    6  5  4  3  2  1  0)
        (== type [slot-on])          (create-new-anim name x y slot  0    1  2  3  4  5  6  7)
                                                    ))
    [new animation] '(name [name] type [type] x [x] y [y]) howto-no)

(define make-slot as (fn (index type)
    (define x    as (index-to-x index)              [x])
    (define y    as (to-integer (index-to-y index)) [y])
    (define name as (string-format [{}{}] x y)      [name])

    (new-anim name type x y)

    (hash-map
         'id   name
         'x    x
         'y    y
         'type type
         'sx   0
         'sy   0
         'sw   0
         'sh   0
         'tx   0
         'ty   0
         'tw   0
         'th   0))
  [make slot of the given type] '(index [index] type [type]) howto-no)

(define slot-toggle-at as (fn (x y)
    (slot-toggle (level-get-slot x y)))
  [-] '(x [x] y [y]) howto-no)

(define slot-toggle as (fn (slot)
    (define id   as (find slot 'id)   [id])
    (define type as (find slot 'type) [type])
    (define x    as (find slot 'x)    [type])
    (define y    as (find slot 'y)    [type])

    (if (== type [slot-off])
        (do
            (= slot 'type [slot-on])
            (animation-entity-remove id)
            (new-anim id [slot-on] x y)
            (return nil)))

    (if (== type [slot-on])
        (do
            (= slot 'type [slot-off])
            (animation-entity-remove id)
            (new-anim id [slot-off] x y)
            (return nil)))

    (if (== type [slot-covered-on])
        (do
            (= slot 'type [slot-covered-off])
            (animation-entity-remove id)
            (new-anim id [slot-covered-off] x y)
            (return nil)))

    (if (== type [slot-covered-off])
        (do
            (= slot 'type [slot-covered-on])
            (animation-entity-remove id)
            (new-anim id [slot-covered-on] x y)
            (return nil)))

    (if (== type [lock-full-opened])
        (do
            (= slot 'type [lock-full-closed])
            (animation-entity-remove id)
            (new-anim id [lock-full-closed] x y)
            (return nil)))

    (if (== type [lock-half-closed])
        (do
            (= slot 'type [lock-full-closed])
            (animation-entity-remove id)
            (new-anim id [lock-full-closed] x y)
            (return nil)))

    (if (== type [lock-half-opened])
        (do
            (= slot 'type [lock-full-opened])
            (animation-entity-remove id)
            (new-anim id [lock-full-opened] x y)
            (return nil)))

    (if (== type [lock-full-closed])
        (do
            (= slot 'type [lock-half-opened])
            (animation-entity-remove id)
            (new-anim id [lock-half-opened] x y)
            (return nil))))
  [-] '(slot [slot]) howto-no)

(define slot-toggle-neighbors as (fn (slot)
    (define x as (find slot 'x) [type])
    (define y as (find slot 'y) [type])

    ; Corners
    (if (and (== x 0) (== y 0)) (do (slot-toggle-at (+ x 1) y) (slot-toggle-at x (+ y 1)) (return nil)))
    (if (and (== x m) (== y 0)) (do (slot-toggle-at (- x 1) y) (slot-toggle-at x (+ y 1)) (return nil)))
    (if (and (== x 0) (== y m)) (do (slot-toggle-at (+ x 1) y) (slot-toggle-at x (- y 1)) (return nil)))
    (if (and (== x m) (== y m)) (do (slot-toggle-at (- x 1) y) (slot-toggle-at x (- y 1)) (return nil)))

    ; Left side
    (if (== x 0) (do (slot-toggle-at (+ x 1) y) (slot-toggle-at x (- y 1)) (slot-toggle-at x (+ y 1)) (return nil)))

    ; Right side
    (if (== x m) (do (slot-toggle-at (- x 1) y) (slot-toggle-at x (- y 1)) (slot-toggle-at x (+ y 1)) (return nil)))

    ; Top side
    (if (== y 0) (do (slot-toggle-at x (+ y 1)) (slot-toggle-at (- x 1) y) (slot-toggle-at (+ x 1) y) (return nil)))

    ; Bottom side
    (if (== y m) (do (slot-toggle-at x (- y 1)) (slot-toggle-at (- x 1) y) (slot-toggle-at (+ x 1) y) (return nil)))

    ; Somewhere "middle"; not corners and not borders
    (slot-toggle-at x (- y 1))
    (slot-toggle-at x (+ y 1))
    (slot-toggle-at (+ x 1) y)
    (slot-toggle-at (- x 1) y))
  [-] '(slot [slot]) howto-no)

(define slot-is-passed as (fn (slot)
    (define type as (find slot 'type) [type])

    (if (== type [slot-off])         (return true ))
    (if (== type [slot-covered-off]) (return true ))
    (if (== type [lock-full-opened]) (return true ))
    (if (== type [slot-missing])     (return true ))

    (return false))
  [is this slot in a state allowing level pass] '(slot [slot]) howto-no)

(define slot-on-mouse as (fn (slot x y ox oy)
    (define id  as (find slot 'id) [id])

    (define mx1 as (+ ox (animation-entity-get-x id)) [mx1])
    (define mx2 as (+ mx1 32) [mx2])

    (define my1 as (+ oy (animation-entity-get-y id)) [my1])
    (define my2 as (+ my1 32) [my2])

    ; TODO XXX make if to return errors it encounters
    (if (< x mx1) (return nil))
    (if (> x mx2) (return nil))

    (if (< y my1) (return nil))
    (if (> y my2) (return nil))

    (define type as (find slot 'type) [type])

    (if (== type [slot-off])
        (do
            (slot-toggle slot)
            (slot-toggle-neighbors slot)
            (return nil)))

    (if (== type [slot-on])
        (do
            (slot-toggle slot)
            (slot-toggle-neighbors slot)
            (return nil)))

    (if (== type [slot-covered-on])
        (do
            (return nil)))

    (if (== type [slot-covered-off])
        (do
            (return nil)))

    (if (== type [lock-full-opened])
        (do
            (slot-toggle slot)
            (slot-toggle-neighbors slot)
            (return nil)))

    (if (== type [lock-half-closed])
        (do
            (slot-toggle slot)
            (slot-toggle-neighbors slot)
            (return nil)))

    (if (== type [lock-half-opened])
        (do
            (slot-toggle slot)
            (slot-toggle-neighbors slot)
            (return nil)))

    (if (== type [lock-full-closed])
        (do
            (slot-toggle slot)
            (slot-toggle-neighbors slot)
            (return nil))))
  [slot on mouse] '(slot [slot] x [x] y [y] ox [ox] oy [oy]) howto-no)

(define level-reset-to as (fn (input)
    (animation-entity-remove-all)
    (= level '())
    (> (len input) level-length (abort [level input is too long!]))
    (if (< (len input) level-length) (for i from (len input) to (- level-length 1) (+= input [slot-off])))
    (for i from 0 to (- level-length 1) (+= level (make-slot i (ln@ input i)))))
  [clear level to the given level] '(input [level as vector of strings]) howto-no)

(define level-set-slot as (fn (x y type)
    (= (ln@ level (coordinates-to-index x y)) 'type type))
  [level-set-slot] '(x [x] y [y] type [type]) howto-no)

(define level-get-slot as (fn (x y)
    (ln@ level (coordinates-to-index x y)))
  [level-get-slot] '(x [x] y [y]) howto-no)

(define level-1 as (fn ()
    (level-reset-to '(
        [slot-on]  [slot-on]  [slot-off] [slot-off] [slot-off]
        [slot-on]))
    (= level-current-number 1))
  [level-1] '() howto-no)

(define level-2 as (fn ()
    (level-reset-to '(
        [slot-off]  [slot-off]  [slot-off] [slot-off] [slot-off]
        [slot-off]  [slot-off]  [slot-off] [slot-off] [slot-off]
        [slot-off]  [slot-off]  [lock-full-closed]))
    (= level-current-number 2))
  [level-2] '() howto-no)

(define level-3 as (fn ()
    (level-reset-to '(
        [slot-missing] [slot-off] [slot-off] [slot-off] [slot-missing]
        [slot-off] [slot-off] [slot-off] [slot-off] [slot-off]
        [slot-off] [slot-off] [slot-covered-on] [slot-off] [slot-off]
        [slot-off] [slot-off] [slot-off] [slot-off] [slot-off]
        [slot-missing] [slot-off] [slot-off] [slot-off] [slot-missing]
    ))
    (= level-current-number 3))
  [level-3] '() howto-no)

(define level-4 as (fn ()
    (level-reset-to '(
        [slot-off] [slot-off] [slot-off] [slot-off] [slot-off]
        [slot-off] [slot-off] [slot-off] [slot-off] [slot-off]
        [slot-off] [slot-off] [slot-on]
    ))
    (= level-current-number 4))
  [level-4] '() howto-no)

(define level-5 as (fn ()
    (level-reset-to '([slot-on]))
    (= level-current-number 5))
  [level-5] '() howto-no)

(define level-restart as (fn ()
    ; implement 'select' and use it here. these if's
    ; without else will not work without the temp variable
    (define lnum as level-current-number [level number before change])

    (if (== 1 lnum) (level-1))
    (if (== 2 lnum) (level-2))
    (if (== 3 lnum) (level-3))
    (if (== 4 lnum) (level-4))
    (if (== 5 lnum) (level-5))

    (shake))
  [restart level] '() howto-no)

(define level-next as (fn ()
    ; implement 'select' and use it here. these if's
    ; without else will not work without the temp variable
    (define lnum as level-current-number [level number before change])

    (if (== 1 lnum) (level-2))
    (if (== 2 lnum) (level-3))
    (if (== 3 lnum) (level-4))
    (if (== 4 lnum) (level-5))
    (if (== 5 lnum) (level-1))

    )
  [next level] '() howto-no)

(define current-state as [game] [current-state])

(define printlevel as false [printlevel])

(define check-possible-level-pass as (fn ()
    (for i in level (if (== false (slot-is-passed i)) (return nil)))
    ; Level is passed
    (= current-state [tweenOut])
    (tween-level-out))
  [-] '() howto-no)

(define on-mouse-button-down as (fn (x y ox oy)
    (for i in level (slot-on-mouse i x y ox oy))
    (check-possible-level-pass) nil)
  [----] '(x [x] y [y] ox [ox] oy [oy]) howto-no)

(define state-update-game as (fn (dt input input-x input-y origo-x origo-y)
    (if (== input [restart])           (do (= input []) (level-restart)))
    (if (== input [action 1])          (do (= input []) (= printlevel (not printlevel))))
    (if (== input [down]) (do (= input []) (on-mouse-button-down input-x input-y origo-x origo-y)))

    true)
  [state-update]
  '(dt [delta time]
    input   [string 'mouse-button-down', 'restart' or 'action 1' ]
    input-x [x coord of mouse]
    input-y [y coord of mouse]
    origo-x [origo x]
    origo-y [origo y])
  howto-no)

(define state-update-tween-out as (fn (dt input input-x input-y origo-x origo-y) true)
  [state-update]
  '(dt [delta time]
    input   [string 'mouse-button-down', 'restart' or 'action 1' ]
    input-x [x coord of mouse]
    input-y [y coord of mouse]
    origo-x [origo-x]
    origo-y [origo-y])
  howto-no)

(define state-update as (fn (dt input input-x input-y origo-x origo-y)

    (define tmpState as current-state [tmpState])

    (if (== [game]     tmpState) (state-update-game      dt input input-x input-y origo-x origo-y))
    (if (== [tweenOut] tmpState) (state-update-tween-out dt input input-x input-y origo-x origo-y))

    (if printlevel (level-print))

    true)
  [state-update]
  '(dt [delta time]
    input   [string 'mouse-button-down', 'restart' or 'action 1' ]
    input-x [x coord of mouse]
    input-y [y coord of mouse]
    origo-x [origo-x]
    origo-y [origo-y])
  howto-no)

(define state-on-tween-out-done as (fn ()
    ;(message-show 0)
    (level-next))
  [---] '() howto-no)

(define state-on-tween-in-done as (fn ()
    (= current-state [game]))
  [---] '() howto-no)

; Game starts here
(level-1)



(define state-render as (fn (dt)
    (sdl2-RenderClear renderer)
    (select
        (== [ingame-tween-in]  current-state) (ingame-state-tween-in-render  dt)
        (== [ingame]           current-state) (ingame-state-render           dt)
        (== [ingame-tween-out] current-state) (ingame-state-tween-out-render dt)
        (== [ingame-shake]     current-state) (ingame-state-shake-render     dt))
    (sdl2-RenderPresent renderer))
  [state-render]
  '(dt [delta time]) howto-no)




(define running             as true                [running])
(define targetFPS           as 20                  [target FPS])
(define targetFrameDuration as (/ 1.0 targetFPS)   [time for a frame to last])

(define dt as targetFrameDuration [delta time])

(while running
       (sdl2-TimerReset)

       (define event as (sdl2-PollEvent) [event from sdl2])
       (define type  as nil              [type of event])
       (if (and (!= event nil) (> (len event) 0)) (= type (ln@ event 0)))
       (define input as [] [input event]) ; TODO

       (select (== type 'QUIT)          (= running false)
               (== type 'JOYBUTTONDOWN) (println [Joystick button {} pressed] (ln@ event 1))
               (== type 'JOYAXIS)       (println [Joystick axis   {}]         (ln@ event 1))
               (== type 'KEYDOWN)       (do
                                          (if (== (ln@ event 1) [UP])    (= input [up]))
                                          (if (== (ln@ event 1) [DOWN])  (= input [down]))
                                          (if (== (ln@ event 1) [LEFT])  (= input [left]))
                                          (if (== (ln@ event 1) [RIGHT]) (= input [right]))
                                          (if (== (ln@ event 1) [j])     (= input [down]))
                                          (if (== (ln@ event 1) [k])     (= input [up]))
                                          (if (== (ln@ event 1) [h])     (= input [left]))
                                          (if (== (ln@ event 1) [l])     (= input [right]))
                                          ))
       (easing-update    dt)
       (state-update     dt input)
       (animation-update dt)
       (state-render     dt)

       (if (> targetFrameDuration dt)
         (do
           (define delayInSeconds as (- targetFrameDuration dt) [time to sleep])
           (if (> delayInSeconds 0)
             (sdl2-Delay delayInSeconds))))

       (sdl2-TimerUpdate)
       (= dt (sdl2-TimerGetSeconds)))

(sdl2-Quit)








;;; Here are some helper functions for debugging purposes.
;;; Can be removed later

(define level-print-row as (fn (y)
    (for x from 0 to (- level-width 1) (level-print-slot x y))
    (println []))
  [lll] '(y [y]) howto-no)

(define level-print as (fn ()
    (println [-------------------------------------------------])
    (for y from 0 to (- level-width 1) (level-print-row y))
    (println [-------------------------------------------------]))
  [lll] '() howto-no)

(define level-print-slot as (fn (x y)
    (define name as (find (level-get-slot x y) 'type) [name])

    (define str as
        (string-format [{} ({},{})] name (find (level-get-slot x y) 'x) (find (level-get-slot x y) 'y)) [str])

    (print str)

    (define spaces as (- 18 (len str)) [ll])
    (for i from 0 to spaces (print [ ])))
  [kk] '(x [x] y [y]) howto-no)

