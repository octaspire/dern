#!*****************************************************************************
Octaspire Lightcube - Puzzle game
Copyright 2018 www.octaspire.com

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*****************************************************************************!#
(require 'dern_sdl2)

(define RO as {D+7}  [open])
(define RC as {D+15} [closed])
(define PO as {D+23} [popen])
(define PC as {D+31} [pclosed])
(define LO as {D+39} [lopen])
(define LH as {D+55} [lhopenfromclosed])
(define LC as {D+63} [lclosed])
(define XX as {D+71} [cross])

(define top-faces as (vector
                         (vector RO RC RC
                                 RO RO RC
                                 RO RO RO)
                         (vector RO RO RO
                                 RO RO RO
                                 RO RO RO)) [top faces])

(define left-faces as (vector
                         (vector RO RO RO
                                 RO RO RO
                                 RO RO RO)
                         (vector RO RO RO
                                 RO RO RO
                                 RO RO RO)) [left faces])

(define right-faces as (vector
                         (vector RO RO RO
                                 RO RO RO
                                 RO RO RO)
                         (vector RO RO RO
                                 RO RO RC
                                 RO RC RC)) [right faces])

(define levelnum   as {D-1}                   [current level number])
(define top-face   as (ln@ top-faces   {D+0}) [current top   face])
(define left-face  as (ln@ left-faces  {D+0}) [current left  face])
(define right-face as (ln@ right-faces {D+0}) [current right face])

(define load-next-level as (fn ()
    (++ levelnum)
    (if (>= levelnum (len top-faces)) (= levelnum {D+0}))
    (= top-face (ln@ top-faces levelnum))
    (= left-face (ln@ left-faces levelnum))
    (= right-face (ln@ right-faces levelnum)))
  [load the next level] '() howto-no)

(define is-idx-passed as (fn (idx)
    (if (and (>= idx {D+0})  (<= idx {D+7}))  (return true))
    (if (and (>= idx {D+16}) (<= idx {D+23})) (return true))
    (if (and (>= idx {D+32}) (<= idx {D+39})) (return true))
    (if (and (>= idx {D+64}) (<= idx {D+71})) (return true))
    (return false))
  [is a given index in passed state] '(idx [animation index]) howto-no)

(define is-level-passed as (fn ()
    (for i in top-face   (if (not (is-idx-passed i)) (return false)))
    (for i in left-face  (if (not (is-idx-passed i)) (return false)))
    (for i in right-face (if (not (is-idx-passed i)) (return false)))
    (return true))
  [is current level passed] '() howto-no)

(sdl2-Init 'VIDEO)

(define window   as (sdl2-CreateWindow [octaspire-maze] 'CENTERED 'CENTERED {D+640} {D+640}) [window])
(define renderer as (sdl2-CreateRenderer window {D-1} 'SOFTWARE) [renderer])

(sdl2-glClearColor {D+0} {D+0} {D+0} {D+1})
(sdl2-glClearDepth {D+1.0})
(sdl2-load-texture-base64 true [])

(sdl2-glMatrixMode 'GL_PROJECTION)
(sdl2-glLoadIdentity)
(sdl2-gluPerspective {D+45} {D+1} {D+0.1} {D+100})

(sdl2-glMatrixMode 'GL_MODELVIEW)
(sdl2-glLoadIdentity)
(sdl2-gluLookAt {D+0.5} {D+7} {D+8}  ; eye
                {D+0.5} {D+0} {D+0}  ; target
                {D+0}   {D+1} {D+0}) ; up direction

(define idx2stat as (fn (idx)
    (if (and (>= idx {D+0})  (<= idx {D+7}))  (return [open]))
    (if (and (>= idx {D+8})  (<= idx {D+15})) (return [closed]))
    (if (and (>= idx {D+16}) (<= idx {D+23})) (return [popen]))
    (if (and (>= idx {D+24}) (<= idx {D+31})) (return [pclosed]))
    (if (and (>= idx {D+32}) (<= idx {D+39})) (return [lopen]))
    (if (and (>= idx {D+40}) (<= idx {D+47})) (return [lhopenfromopen]))
    (if (and (>= idx {D+48}) (<= idx {D+55})) (return [lhopenfromclosed]))
    (if (and (>= idx {D+56}) (<= idx {D+63})) (return [lclosed]))
    (if (and (>= idx {D+64}) (<= idx {D+71})) (return [cross]))
    (return [unkown]))
  [frame index to slot state] '(idx [idx]) howto-ok)

(define isidxlasting as (fn (idx)
    (if (== idx {D+0})  (return true))
    (if (== idx {D+8})  (return true))
    (if (== idx {D+16}) (return true))
    (if (== idx {D+24}) (return true))
    (if (== idx {D+32}) (return true))
    (if (== idx {D+40}) (return true))
    (if (== idx {D+48}) (return true))
    (if (== idx {D+56}) (return true))
    (if (== idx {D+64}) (return true))
    (return false))
  [is frame index fully animated] '(idx [idx]) howto-ok)

(define state2idx as (fn (stat)
    (if (== stat [open])             (return {D+7}))
    (if (== stat [closed])           (return {D+15}))
    (if (== stat [popen])            (return {D+23}))
    (if (== stat [pclosed])          (return {D+31}))
    (if (== stat [lopen])            (return {D+39}))
    (if (== stat [lhopenfromopen])   (return {D+47}))
    (if (== stat [lhopenfromclosed]) (return {D+55}))
    (if (== stat [lclosed])          (return {D+63}))
    (if (== stat [cross])            (return {D+71}))
    (return {D-1}))
  [state name to (max) frame index] '(stat [state name]) howto-ok)

(define updateidx as (fn (idx)
    (if (and (> idx {D+0})  (<= idx {D+7}))  (return (- idx {D+1})))
    (if (and (> idx {D+8})  (<= idx {D+15})) (return (- idx {D+1})))
    (if (and (> idx {D+16}) (<= idx {D+23})) (return (- idx {D+1})))
    (if (and (> idx {D+24}) (<= idx {D+31})) (return (- idx {D+1})))
    (if (and (> idx {D+32}) (<= idx {D+39})) (return (- idx {D+1})))
    (if (and (> idx {D+40}) (<= idx {D+47})) (return (- idx {D+1})))
    (if (and (> idx {D+48}) (<= idx {D+55})) (return (- idx {D+1})))
    (if (and (> idx {D+56}) (<= idx {D+63})) (return (- idx {D+1})))
    (if (and (> idx {D+64}) (<= idx {D+71})) (return (- idx {D+1})))
    (return idx))
  [step frame index towards lasting value] '(idx [idx]) howto-ok)

(define render-slot as (fn (f x y index pick)
    (sdl2-glPushMatrix)

    (if (== f |L|)
        (do
            (sdl2-glRotatef {D-45} {D+0} {D+1} {D+0})
            (sdl2-glTranslatef (+ {D-1.5} x) (+ {D-0.5} (* y {D-1})) {D+0})))

    (if (== f |R|)
        (do
            (sdl2-glRotatef {D+45} {D+0} {D+1} {D+0})
            (sdl2-glTranslatef (+ {D+0.5} x) (+ {D-0.5} (* y {D-1})) {D+1})))

    (if (== f |T|)
        (do
            (sdl2-glRotatef {D+90} {D+1} {D+0} {D+0})
            (sdl2-glRotatef {D+45} {D+0} {D+0} {D+1})
            (sdl2-glTranslatef (+ {D-1.5} y) (+ {D-0.5} (* x {D-1})) {D+0})))

    (define fenv as (env-current) [local envinronment inside this function])

    (if (not pick) (do
        (define side as {D+0.0625} [width of frame inside texture] in fenv)
        (define s1 as (/ (mod (* {D+32} index) {D+256}) {D+512}) [s1] in fenv)
        (define t1 as (/ (* (to-integer (/ index {D+8})) {D+32}) {D+512}) [t1] in fenv)
        (define s2 as (+ s1 side) [s2] in fenv)
        (define t2 as (+ t1 side) [t2] in fenv)))

    (sdl2-glBegin 'GL_QUADS)

    (if pick (sdl2-glColor4ub (to-integer f) x y {X+FF}))

    (if (not pick) (sdl2-glTexCoord2f s1 (if (== f |T|) t1 t2)))
    (sdl2-glVertex3 {D-0.5} {D-0.5} {D+0})

    (if (not pick) (sdl2-glTexCoord2f s2 (if (== f |T|) t1 t2)))
    (sdl2-glVertex3 {D+0.5} {D-0.5} {D+0})

    (if (not pick) (sdl2-glTexCoord2f s2 (if (== f |T|) t2 t1)))
    (sdl2-glVertex3 {D+0.5} {D+0.5} {D+0})

    (if (not pick) (sdl2-glTexCoord2f s1 (if (== f |T|) t2 t1)))
    (sdl2-glVertex3 {D-0.5} {D+0.5} {D+0})

    (if pick (sdl2-glColor4ub {X+FF} {X+FF} {X+FF} {X+FF}))

    (sdl2-glEnd)
    (sdl2-glPopMatrix))

  [Draw one slot of the left face] '(f [face]
                                     x [x]
                                     y [y]
                                     index [animation frame index]
                                     pick [render for picking if true]) howto-no)

(define render-cube as (fn (index x y pick)
    (if pick
        (do (sdl2-glDisable 'GL_TEXTURE_2D)))

    (sdl2-glClear)

    (for y from {D+0} to {D+2}
         (for x from {D+0} to {D+2}
              (do (render-slot |L| x y (ln@ left-face  (+ x (* y {D+3}))) pick)
                  (render-slot |R| x y (ln@ right-face (+ x (* y {D+3}))) pick)
                  (render-slot |T| x y (ln@ top-face   (+ x (* y {D+3}))) pick))))

    (define picked as nil [optional pick result])

    (if pick (= picked (sdl2-glReadPixel x y)))

    (if (not pick)
        (sdl2-GL-SwapWindow window))

    (if pick (do
                 (sdl2-glEnable 'GL_TEXTURE_2D)
                 (return picked))))

  [Render the cube] '(index [animation frame index]
                      x [x]
                      y [y]
                      pick [render for picking if true]) howto-no)

(define update-cube as (fn ()
    (for y from {D+0} to {D+2}
         (for x from {D+0} to {D+2}
              (do (= (ln@ left-face  (+ x (* y {D+3}))) (updateidx (ln@ left-face  (+ x (* y {D+3})))))
                  (= (ln@ top-face   (+ x (* y {D+3}))) (updateidx (ln@ top-face   (+ x (* y {D+3})))))
                  (= (ln@ right-face (+ x (* y {D+3}))) (updateidx (ln@ right-face (+ x (* y {D+3})))))))))
  [Update the cube] '() howto-no)

(define press-all as (fn (vec)
    (for i in vec (do (press i false))))
  [press all in the vector] '(vec [elements]) howto-no)

(define press-neighbors as (fn (face x y)
    (select
        ; Top face
        (and (== face |T|) (== x {D+0}) (== y {D+0})) (press-all (vector '(|L| {D+0} {D+0}) '(|T| {D+1} {D+0}) '(|T| {D+0} {D+1})                   ))
        (and (== face |T|) (== x {D+1}) (== y {D+0})) (press-all (vector '(|T| {D+0} {D+0}) '(|T| {D+1} {D+1}) '(|T| {D+2} {D+0})                   ))
        (and (== face |T|) (== x {D+2}) (== y {D+0})) (press-all (vector '(|T| {D+1} {D+0}) '(|T| {D+2} {D+1})                                      ))
        (and (== face |T|) (== x {D+0}) (== y {D+1})) (press-all (vector '(|L| {D+1} {D+0}) '(|T| {D+1} {D+1}) '(|T| {D+0} {D+0}) '(|T| {D+0} {D+2})))
        (and (== face |T|) (== x {D+1}) (== y {D+1})) (press-all (vector '(|T| {D+0} {D+1}) '(|T| {D+1} {D+0}) '(|T| {D+2} {D+1}) '(|T| {D+1} {D+2})))
        (and (== face |T|) (== x {D+2}) (== y {D+1})) (press-all (vector '(|T| {D+1} {D+1}) '(|T| {D+2} {D+0}) '(|T| {D+2} {D+2})                   ))
        (and (== face |T|) (== x {D+0}) (== y {D+2})) (press-all (vector '(|L| {D+2} {D+0}) '(|T| {D+0} {D+1}) '(|T| {D+1} {D+2}) '(|R| {D+0} {D+0})))
        (and (== face |T|) (== x {D+1}) (== y {D+2})) (press-all (vector '(|T| {D+0} {D+2}) '(|T| {D+1} {D+1}) '(|T| {D+2} {D+2}) '(|R| {D+1} {D+0})))
        (and (== face |T|) (== x {D+2}) (== y {D+2})) (press-all (vector '(|T| {D+1} {D+2}) '(|T| {D+2} {D+1}) '(|R| {D+2} {D+0})                   ))

        ; Left face
        (and (== face |L|) (== x {D+0}) (== y {D+0})) (press-all (vector '(|L| {D+0} {D+1}) '(|T| {D+0} {D+0}) '(|L| {D+1} {D+0})                   ))
        (and (== face |L|) (== x {D+1}) (== y {D+0})) (press-all (vector '(|L| {D+0} {D+0}) '(|T| {D+0} {D+1}) '(|L| {D+2} {D+0}) '(|L| {D+1} {D+1})))
        (and (== face |L|) (== x {D+2}) (== y {D+0})) (press-all (vector '(|L| {D+1} {D+0}) '(|T| {D+0} {D+2}) '(|R| {D+0} {D+0}) '(|L| {D+2} {D+1})))
        (and (== face |L|) (== x {D+0}) (== y {D+1})) (press-all (vector '(|L| {D+0} {D+0}) '(|L| {D+0} {D+2}) '(|L| {D+1} {D+1})                   ))
        (and (== face |L|) (== x {D+1}) (== y {D+1})) (press-all (vector '(|L| {D+0} {D+1}) '(|L| {D+1} {D+0}) '(|L| {D+2} {D+1}) '(|L| {D+1} {D+2})))
        (and (== face |L|) (== x {D+2}) (== y {D+1})) (press-all (vector '(|L| {D+1} {D+1}) '(|L| {D+2} {D+0}) '(|L| {D+2} {D+2}) '(|R| {D+0} {D+1})))
        (and (== face |L|) (== x {D+0}) (== y {D+2})) (press-all (vector '(|L| {D+0} {D+1}) '(|L| {D+1} {D+2})                                      ))
        (and (== face |L|) (== x {D+1}) (== y {D+2})) (press-all (vector '(|L| {D+0} {D+2}) '(|L| {D+1} {D+1}) '(|L| {D+2} {D+2})                   ))
        (and (== face |L|) (== x {D+2}) (== y {D+2})) (press-all (vector '(|L| {D+1} {D+2}) '(|L| {D+2} {D+1}) '(|R| {D+0} {D+2})                   ))

        ; Right face
        (and (== face |R|) (== x {D+0}) (== y {D+0})) (press-all (vector '(|T| {D+0} {D+2}) '(|R| {D+1} {D+0}) '(|R| {D+0} {D+1}) '(|L| {D+2} {D+0})))
        (and (== face |R|) (== x {D+1}) (== y {D+0})) (press-all (vector '(|R| {D+0} {D+0}) '(|R| {D+2} {D+0}) '(|R| {D+1} {D+1}) '(|T| {D+1} {D+2})))
        (and (== face |R|) (== x {D+2}) (== y {D+0})) (press-all (vector '(|R| {D+1} {D+0}) '(|R| {D+2} {D+1}) '(|T| {D+2} {D+2})                   ))
        (and (== face |R|) (== x {D+0}) (== y {D+1})) (press-all (vector '(|R| {D+0} {D+0}) '(|R| {D+0} {D+2}) '(|R| {D+1} {D+1}) '(|L| {D+2} {D+1})))
        (and (== face |R|) (== x {D+1}) (== y {D+1})) (press-all (vector '(|R| {D+0} {D+1}) '(|R| {D+1} {D+0}) '(|R| {D+2} {D+1}) '(|R| {D+1} {D+2})))
        (and (== face |R|) (== x {D+2}) (== y {D+1})) (press-all (vector '(|R| {D+1} {D+1}) '(|R| {D+2} {D+0}) '(|R| {D+2} {D+2})                   ))
        (and (== face |R|) (== x {D+0}) (== y {D+2})) (press-all (vector '(|R| {D+0} {D+1}) '(|R| {D+1} {D+2}) '(|L| {D+2} {D+2})                   ))
        (and (== face |R|) (== x {D+1}) (== y {D+2})) (press-all (vector '(|R| {D+0} {D+2}) '(|R| {D+1} {D+1}) '(|R| {D+2} {D+2})                   ))
        (and (== face |R|) (== x {D+2}) (== y {D+2})) (press-all (vector '(|R| {D+1} {D+2}) '(|R| {D+2} {D+1})                                      ))
        ))
  [press neighbors of a slot] '(face [face] x [x] y [y]) howto-no)

(define press-top as (fn (x y is-user-press)
    (define idx   as (ln@ top-face (+ x (* y {D+3}))) [idx])
    (define state as (idx2stat idx) [state])

    (select (== state [open])                              (do (= top-face (+ x (* y {D+3})) (state2idx [closed]))               (if is-user-press (press-neighbors |T| x y)))
            (== state [closed])                            (do (= top-face (+ x (* y {D+3})) (state2idx [open]))                 (if is-user-press (press-neighbors |T| x y)))
            (and (== state [popen])   (not is-user-press)) (do (= top-face (+ x (* y {D+3})) (state2idx [pclosed]))              (if is-user-press (press-neighbors |T| x y)))
            (and (== state [pclosed]) (not is-user-press)) (do (= top-face (+ x (* y {D+3})) (state2idx [popen]))                (if is-user-press (press-neighbors |T| x y)))
            (== state [lopen])                             (do (= top-face (+ x (* y {D+3})) (state2idx [lhalfopenfromopen]))    (if is-user-press (press-neighbors |T| x y)))
            (== state [lhopenfromopen])                    (do (= top-face (+ x (* y {D+3})) (state2idx [lclosed]))              (if is-user-press (press-neighbors |T| x y)))
            (== state [lhopenfromclosed])                  (do (= top-face (+ x (* y {D+3})) (state2idx [lopen]))                (if is-user-press (press-neighbors |T| x y)))
            (== state [lclosed])                           (do (= top-face (+ x (* y {D+3})) (state2idx [lhalfopenfromclosed]))  (if is-user-press (press-neighbors |T| x y)))))

  [press the top face of the cube] '(x [x]
                                     y [y]
                                     is-user-press [was press initiated directly by the user]) howto-no)

(define press-left as (fn (x y is-user-press)
    (define idx   as (ln@ left-face (+ x (* y {D+3}))) [idx])
    (define state as (idx2stat idx) [state])

    (select (== state [open])                              (do (= left-face (+ x (* y {D+3})) (state2idx [closed]))               (if is-user-press (press-neighbors |L| x y)))
            (== state [closed])                            (do (= left-face (+ x (* y {D+3})) (state2idx [open]))                 (if is-user-press (press-neighbors |L| x y)))
            (and (== state [popen])   (not is-user-press)) (do (= left-face (+ x (* y {D+3})) (state2idx [pclosed]))              (if is-user-press (press-neighbors |L| x y)))
            (and (== state [pclosed]) (not is-user-press)) (do (= left-face (+ x (* y {D+3})) (state2idx [popen]))                (if is-user-press (press-neighbors |L| x y)))
            (== state [lopen])                             (do (= left-face (+ x (* y {D+3})) (state2idx [lhalfopenfromopen]))    (if is-user-press (press-neighbors |L| x y)))
            (== state [lhopenfromopen])                    (do (= left-face (+ x (* y {D+3})) (state2idx [lclosed]))              (if is-user-press (press-neighbors |L| x y)))
            (== state [lhopenfromclosed])                  (do (= left-face (+ x (* y {D+3})) (state2idx [lopen]))                (if is-user-press (press-neighbors |L| x y)))
            (== state [lclosed])                           (do (= left-face (+ x (* y {D+3})) (state2idx [lhalfopenfromclosed]))  (if is-user-press (press-neighbors |L| x y)))))

  [press the left face of the cube] '(x [x]
                                     y [y]
                                     is-user-press [was press initiated directly by the user]) howto-no)

(define press-right as (fn (x y is-user-press)
    (define idx   as (ln@ right-face (+ x (* y {D+3}))) [idx])
    (define state as (idx2stat idx) [state])

    (select (== state [open])                              (do (= right-face (+ x (* y {D+3})) (state2idx [closed]))               (if is-user-press (press-neighbors |R| x y)))
            (== state [closed])                            (do (= right-face (+ x (* y {D+3})) (state2idx [open]))                 (if is-user-press (press-neighbors |R| x y)))
            (and (== state [popen])   (not is-user-press)) (do (= right-face (+ x (* y {D+3})) (state2idx [pclosed]))              (if is-user-press (press-neighbors |R| x y)))
            (and (== state [pclosed]) (not is-user-press)) (do (= right-face (+ x (* y {D+3})) (state2idx [popen]))                (if is-user-press (press-neighbors |R| x y)))
            (== state [lopen])                             (do (= right-face (+ x (* y {D+3})) (state2idx [lhalfopenfromopen]))    (if is-user-press (press-neighbors |R| x y)))
            (== state [lhopenfromopen])                    (do (= right-face (+ x (* y {D+3})) (state2idx [lclosed]))              (if is-user-press (press-neighbors |R| x y)))
            (== state [lhopenfromclosed])                  (do (= right-face (+ x (* y {D+3})) (state2idx [lopen]))                (if is-user-press (press-neighbors |R| x y)))
            (== state [lclosed])                           (do (= right-face (+ x (* y {D+3})) (state2idx [lhalfopenfromclosed]))  (if is-user-press (press-neighbors |R| x y)))))
  [press the right face of the cube] '(x [x]
                                     y [y]
                                     is-user-press [was press initiated directly by the user]) howto-no)

(define press as (fn (pickdata is-user-press)
    (define face as (to-integer(ln@ pickdata {D+0})) [what face, if any, was pressed])

    (select (== face (to-integer |T|)) (press-top   (ln@ pickdata {D+1}) (ln@ pickdata {D+2}) is-user-press)
            (== face (to-integer |L|)) (press-left  (ln@ pickdata {D+1}) (ln@ pickdata {D+2}) is-user-press)
            (== face (to-integer |R|)) (press-right (ln@ pickdata {D+1}) (ln@ pickdata {D+2}) is-user-press)))

  [press the cube, if necessary] '(pickdata      [color picking results]
                                   is-user-press [is direct press from the user]) howto-no)

(define running             as true                  [running])
(define targetFPS           as {D+20}                [target FPS])
(define targetFrameDuration as (/ {D+1.0} targetFPS) [time for a frame to last])

(define dt as targetFrameDuration [delta time])
(define idx as (state2idx [lclosed]) [frame index])

(load-next-level)

(while running
       ; TODO get actual position from SDL
       (define mx as {D+0} [mouse x])
       (define my as {D+0} [mouse y])

       (sdl2-TimerReset)

       (define event as (sdl2-PollEvent) [event from sdl2])
       (define type  as nil              [type of event])
       (if (and (!= event nil) (> (len event) {D+0})) (= type (ln@ event {D+0})))

       (select (== type 'QUIT)            (= running false)
               (== type 'MOUSEBUTTONDOWN) (do
                                              (= mx (ln@ event {D+1}))
                                              (= my (- {D+640} (ln@ event {D+2})))
                                              (press (render-cube idx mx my true) true)))

       (update-cube)
       (render-cube idx mx my false)
       (= idx (updateidx idx))

       (if (is-level-passed) (load-next-level))

       (if (> targetFrameDuration dt)
           (do
               (define delayInSeconds as (- targetFrameDuration dt) [time to sleep])
               (if (> delayInSeconds {D+0})
                   (sdl2-Delay delayInSeconds))))

       (sdl2-TimerUpdate)
       (= dt (sdl2-TimerGetSeconds)))

(sdl2-Quit)
