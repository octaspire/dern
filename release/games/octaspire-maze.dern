(require 'dern_sdl2)
(require 'dern_easing)
(require 'dern_animation)

(define command-line-args as (host-get-command-line-arguments) [command line arguments])

(define sdl-init-vec as '(sdl2-Init 'VIDEO) [SDL2 is initialized by evaluating this vector])

(if (> (len (find (command-line-args [--joystick]))) {D+0})
       (+= sdl-init-vec ''JOYSTICK))

(eval sdl-init-vec)

(define window   as (sdl2-CreateWindow [octaspire-maze] 'CENTERED 'CENTERED {D+640} {D+480}) [window])
(define renderer as (sdl2-CreateRenderer window {D-1} 'SOFTWARE) [renderer])

(define texture as (sdl2-CreateTexture
        renderer
        'BASE64
        []
        {D+255}
        {D+0}
        {D+180}) [texture])

(define level                      as '()                                  [level])
(define pass-counters              as (hash-map)                           [pass counters of the level])
(define level-width                as {D+20}                               [level-width])
(define level-hwidth               as (to-integer (* level-width {D+0.5})) [level half width])
(define level-current-number       as {D+0}                                [current level number])
(define level-number-of-keys       as {D+0}                                [How many keys current level had when it started])
(define player-x                   as nil                                  [current player x])
(define player-y                   as nil                                  [current player y])
(define level-updatable-indices    as (hash-map)                           [entities in current level that must be updated])
(define pass-or-fail-level-pending as false                                [.])
(define active-exit-x              as nil                                  [x-coordinate of activated exit])
(define active-exit-y              as nil                                  [y-coordinate of activated exit])
(define level-restart-pending      as {D-1}                                [Negative: not pending])
(define origoX                     as {D+320}                              [X-coordinate of center for drawing])
(define origoY                     as {D+240}                              [Y-coordinate of center for drawing])
(define shakeStepsLeft             as {D+0}                                [Times to shake the level])
(define shakeX                     as {D+0}                                [Shake x-coordinate])

(define shake as (fn ()
    (= shakeStepsLeft {D+20}))
  [shake the level] '() howto-no)

(define get-player as (fn ()
    (level-get-slot player-x player-y))
  [.] '() howto-no)

(define make-empty-slot as (fn ()
    (hash-map
         'name                []
         'x                   {D+0}
         'y                   {D+0}
         'dir                 nil
         'sx                  (copy {D+0})
         'sy                  (copy {D+0})
         'sw                  (copy {D+0})
         'sh                  (copy {D+0})
         'tx                  (copy {D+0})
         'ty                  (copy {D+0})
         'tw                  (copy {D+0})
         'th                  (copy {D+0})
         'count               {D+0}
         'bomb-original-count {D+0}
         'bomb-started        false
         'bomb-uptime         {D+0}
         'number-of-keys      {D+0}
         'player-was-on-side  []
         'toggle-e            false
         'toggle-n            false
         'toggle-s            false
         'toggle-w            false
         'decreasePending     false
         'removePending       false))
  [make empty slot] '() howto-no)

(define level-init as (fn ()
    (for i from {D+0} to (* level-width level-width) (+= level (make-empty-slot))))
  [init level] '() howto-no)

(level-init)

(define level-reset as (fn ()
    (animation-remove)
    (= pending-input '())
    (= level-updatable-indices (hash-map))
    (= level-number-of-keys {D+0})
    (= player-x nil)
    (= player-y nil)
    (= pass-or-fail-level-pending false)
    (= active-exit-x nil)
    (= active-exit-y nil)
    (for i in level (= i 'name []))
    (= pass-counters (hash-map)))
  [clear level] '() howto-no)

(define coordinates-to-index as (fn (x y)
    (+ (+ x level-hwidth) (* (+ y level-hwidth) level-width)))
  [...] '(x [x] y [y]) howto-ok)

(define level-set-slot as (fn (x y slot)
    (= (ln@ level (coordinates-to-index x y)) slot))
  [level-set-slot] '(x [x] y [y] slot [slot]) howto-no)

(define level-set-slot-to-empty as (fn (x y)
    (= (level-get-slot x y) 'name []))
  [level-set-slot] '(x [x] y [y]) howto-no)

(define level-get-slot as (fn (x y)
    (ln@ level (coordinates-to-index x y)))
  [level-get-slot] '(x [x] y [y]) howto-no)

(define level-is-slot-empty? as (fn (x y)
    (== [] (find (level-get-slot x y) 'name)))
  [level-is-slot-empty?] '(x [x] y [y]) howto-no)


(define level-move-slot as (fn (fx fy tx ty)
    (level-set-slot tx ty (level-get-slot fx fy))
    (level-set-slot-to-empty fx fy)
    (= (level-get-slot tx ty) 'x tx)
    (= (level-get-slot tx ty) 'y ty))
  [level-move-slot] '(fx [fx] fy [fy] tx [tx] ty [ty]) howto-no)

(define are-coordinates-out-of-level as (fn (x y)
    (select
        (< x (- level-hwidth))  true
        (>= x level-hwidth)     true
        (< y (- level-hwidth))  true
        (>= y level-hwidth)     true
        default                 false))
  [check if coordinates are outside level area] '(x [x] y [y]) howto-ok)

(define dir-to-side as (fn (dir)
    (select
        (== dir [u]) [d]
        (== dir [d]) [u]
        (== dir [l]) [r]
        (== dir [r]) [l]
        default      nil))
  [dir-to-side] '(dir [dir]) howto-ok)

(define coords-to-side as (fn (ex ey px py)
    (if (== ex px)
        (if (== ey py) (return nil) (if (> ey py) (return [d]) (return [u]))))

    (if (== ey py)
        (if (== ex px) (return nil) (if (> ex px) (return [r]) (return [l]))))

    nil)
  [coords-to-side] '(ex [ex] ey [ey] px [px] py [py]) howto-ok)

(define bomb-remove as (fn (name x y)
    (level-set-slot-to-empty x y)
    (animation-remove name)
    (-= level-updatable-indices name) 
    nil)
  [remove the named bomb at the given coordinates] '(name [name] x [x] y [y]) howto-no)

(define bomb-on-collision as (fn (name x y)
    (define slot as (level-get-slot x y) [slot at x y, the bomb])
    (if (find slot 'bomb-started) (bomb-remove name x y) (= slot 'bomb-started true)))
  [should be called when bomb has collision with player]
  '(name [bomb's name] x [bomb's x] y [bomb's y]) howto-no)

(define toggle-open? as (fn (slot)
    (select
        (== (find slot 'toggle-e) false) true
        (== (find slot 'toggle-n) false) true
        (== (find slot 'toggle-s) false) true
        (== (find slot 'toggle-w) false) true
        default                          false))
  [...] '(slot [slot]) howto-no)

(define toggle-set-correct-animation as (fn (name x y)
    (define slot as (level-get-slot x y) [slot at x y, the toggle])

    (define e as (find slot 'toggle-e) [e])
    (define n as (find slot 'toggle-n) [e])
    (define s as (find slot 'toggle-s) [e])
    (define w as (find slot 'toggle-w) [e])

    (select
        ; 1 none
        (and (not e) (not n) (not s) (not w)) (do
            (animation-add name
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+1312} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
            (animation-playing name true))

        ; 2 east
        (and e (not n) (not s) (not w)) (do
            (animation-add name
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+1328} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
            (animation-playing name true))

        ; 3 north
        (and (not e) n (not s) (not w)) (do
            (animation-add name
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+1344} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
            (animation-playing name true))

        ; 4 east and north
        (and e n (not s) (not w)) (do
            (animation-add name
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+1360} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
            (animation-playing name true))

        ; 5 south only
        (and (not e) (not n) s (not w)) (do
            (animation-add name
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+1376} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
            (animation-playing name true))

        ; 6 es
        (and e (not n) s (not w)) (do
            (animation-add name
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+1392} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
            (animation-playing name true))

        ; 7 ns
        (and (not e) n s (not w)) (do
            (animation-add name
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+1408} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
            (animation-playing name true))

        ; 8 ens
        (and e n s (not w)) (do
            (animation-add name
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+1424} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
            (animation-playing name true))

        ; 9 w
        (and (not e) (not n) (not s) w) (do
            (animation-add name
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+1440} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
            (animation-playing name true))

        ; 10 ew
        (and e (not n) (not s) w) (do
            (animation-add name
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+1456} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
            (animation-playing name true))

        ; 11 nw
        (and (not e) n (not s) w) (do
            (animation-add name
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+1472} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
            (animation-playing name true))

        ; 12 enw
        (and e n (not s) w) (do
            (animation-add name
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+1488} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
            (animation-playing name true))

        ; 13 sw
        (and (not e) (not n) s w) (do
            (animation-add name
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+1504} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
            (animation-playing name true))

        ; 14 esw
        (and e (not n) s w) (do
            (animation-add name
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+1520} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
            (animation-playing name true))

        ; 15 nsw
        (and (not e) n s w) (do
            (animation-add name
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+1536} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
            (animation-playing name true))

        ; 16 ensw
        (and e n s w) (do
            (animation-add name
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+1552} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
            (animation-playing name true))))

  [...] '(name [name] x [x] y [y]) howto-no)

(define toggle-on-collision as (fn (name x y pdir)
    (define slot as (level-get-slot x y) [slot at x y, the toggle])

    (select
        (== pdir [u]) (do (= slot 'toggle-s true) (toggle-set-correct-animation name x y))
        (== pdir [d]) (do (= slot 'toggle-n true) (toggle-set-correct-animation name x y))
        (== pdir [l]) (do (= slot 'toggle-e true) (toggle-set-correct-animation name x y))
        (== pdir [r]) (do (= slot 'toggle-w true) (toggle-set-correct-animation name x y))))

  [should be called when toggle has collision with player]
  '(name [toggle's name] x [toggle's x] y [toggle's y] pdir [player's dir]) howto-no)

(define stop-counter-remove as (fn (name x y)
    (level-set-slot-to-empty x y)
    (animation-remove name))
  [remove the named stop counter at the given coordinates]
  '(name [name] x [x] y [y]) howto-no)

(define get-player-num-keys as (fn ()
    (find (get-player) 'number-of-keys))
  [.] '() howto-no)

(define set-player-dir as (fn (dir)
    (= (get-player) 'dir dir))
  [.] '(dir [dir]) howto-no)

(define get-player-current-pullable-id as (fn ()
    (find (get-player) 'current-pullable-id))
  [.] '() howto-no)

(define stop-counter-on-collision as (fn (name x y)
    (define slot  as (level-get-slot x y) [slot at x y, the counter])
    (define count as (find slot 'count)   [count before collision])
    (if (== count {D+1}) (do (stop-counter-remove name x y) (return nil)))
    (define animationName as (string-format [stop-counter-{}] count) [name of the animation])
    (animation-remove name)
    (-= count {D+1})
    (define animationName as (string-format [stop-counter-{}] count) [name of the animation])
    (animation-add name
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    (vector {D+0} (+ {D+688} (* count {D+16})) {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
    (animation-playing name true)
    (= slot 'count count))
  [should be called when stop counter has collision with player]
  '(name [counter's name] x [counter's x] y [counter's y]) howto-no)


(define key-on-collision as (fn (name x y)
    (level-set-slot-to-empty x y)
    (animation-remove name)
    (= (get-player) 'number-of-keys (++ (find (get-player) 'number-of-keys))))
  [should be called when key has collision with player]
  '(name [key's name] x [key's x] y [key's y]) howto-no)

(define turnstile-ew-on-collision as (fn (name x y pdir)
    (define fx as (+ x {D+1}) [fx])
    (define fy as y [fy])
    (if (!= fx player-x) (return nil))
    (if (!= fy player-y) (return nil))
    (define tx as (- x {D+1}) [tx])
    (define ty as y       [ty])
    (move-player-to tx ty)
    (= (get-player) 'dir pdir))
  [should be called when turnstile-ew has collision with player]
  '(name [turnstile's name] x [turnstile's x] y [turnstile's y] pdir [player's dir])
  howto-no)

(define turnstile-we-on-collision as (fn (name x y pdir)
    (define fx as (- x {D+1}) [fx])
    (define fy as y       [fy])
    (if (!= fx player-x) (return nil))
    (if (!= fy player-y) (return nil))
    (define tx as (+ x {D+1}) [tx])
    (define ty as y       [ty])
    (move-player-to tx ty)
    (= (get-player) 'dir pdir))
  [should be called when turnstile-we has collision with player]
  '(name [turnstile's name] x [turnstile's x] y [turnstile's y] pdir [player's dir])
  howto-no)

(define turnstile-sn-on-collision as (fn (name x y pdir)
    (define fx as x       [fx])
    (define fy as (+ y {D+1}) [fy])
    (if (!= fx player-x) (return nil))
    (if (!= fy player-y) (return nil))
    (define tx as x       [tx])
    (define ty as (- y {D+1}) [ty])
    (move-player-to tx ty)
    (= (get-player) 'dir pdir))
  [should be called when turnstile-sn has collision with player]
  '(name [turnstile's name] x [turnstile's x] y [turnstile's y] pdir [player's dir])
  howto-no)

(define turnstile-ns-on-collision as (fn (name x y pdir)
    (define fx as x       [fx])
    (define fy as (- y {D+1}) [fy])
    (if (!= fx player-x) (return nil))
    (if (!= fy player-y) (return nil))
    (define tx as x       [tx])
    (define ty as (+ y {D+1}) [ty])
    (move-player-to tx ty)
    (= (get-player) 'dir pdir))
  [should be called when turnstile-ns has collision with player]
  '(name [turnstile's name] x [turnstile's x] y [turnstile's y] pdir [player's dir])
  howto-no)



(define stop-turnstile-ew-on-collision as (fn (name x y pdir)
    (define fx as (+ x {D+1}) [fx])
    (define fy as y       [fy])
    (if (!= fx player-x) (return nil))
    (if (!= fy player-y) (return nil))
    (define tx as (- x {D+1}) [tx])
    (define ty as y       [ty])
    (move-player-to tx ty))
  [should be called when stop-turnstile-ew has collision with player]
  '(name [turnstile's name] x [turnstile's x] y [turnstile's y] pdir [player's dir])
  howto-no)

(define stop-turnstile-we-on-collision as (fn (name x y pdir)
    (define fx as (- x {D+1}) [fx])
    (define fy as y       [fy])
    (if (!= fx player-x) (return nil))
    (if (!= fy player-y) (return nil))
    (define tx as (+ x {D+1}) [tx])
    (define ty as y       [ty])
    (move-player-to tx ty))
  [should be called when stop-turnstile-we has collision with player]
  '(name [turnstile's name] x [turnstile's x] y [turnstile's y] pdir [player's dir])
  howto-no)

(define stop-turnstile-sn-on-collision as (fn (name x y pdir)
    (define fx as x       [fx])
    (define fy as (+ y {D+1}) [fy])
    (if (!= fx player-x) (return nil))
    (if (!= fy player-y) (return nil))
    (define tx as x       [tx])
    (define ty as (- y {D+1}) [ty])
    (move-player-to tx ty))
  [should be called when stop-turnstile-sn has collision with player]
  '(name [turnstile's name] x [turnstile's x] y [turnstile's y] pdir [player's dir])
  howto-no)

(define stop-turnstile-ns-on-collision as (fn (name x y pdir)
    (define fx as x       [fx])
    (define fy as (- y {D+1}) [fy])
    (if (!= fx player-x) (return nil))
    (if (!= fy player-y) (return nil))
    (define tx as x       [tx])
    (define ty as (+ y {D+1}) [ty])
    (move-player-to tx ty))
  [should be called when stop-turnstile-ns has collision with player]
  '(name [turnstile's name] x [turnstile's x] y [turnstile's y] pdir [player's dir])
  howto-no)

(define slope-en-on-collision as (fn (name x y pdir)
    (define fx1 as x       [fx1])
    (define fy1 as (- y {D+1}) [fy1])
    (define fx2 as (+ x {D+1}) [fx2])
    (define fy2 as y       [fy2])
    (define tx1 as fx2     [tx1])
    (define ty1 as fy2     [ty1])
    (define tx2 as fx1     [tx2])
    (define ty2 as fy1     [ty2])
    (if (and (== fx1 player-x) (== fy1 player-y)) (do (move-player-to tx1 ty1) (= (get-player) 'dir [r]) (return nil)))
    (if (and (== fx2 player-x) (== fy2 player-y)) (do (move-player-to tx2 ty2) (= (get-player) 'dir [u]) (return nil))))
  [should be called when slope-en has collision with player]
  '(name [slope's name] x [slope's x] y [slope's y] pdir [player's dir])
  howto-no)

(define slope-es-on-collision as (fn (name x y pdir)
    (define fx1 as x       [fx1])
    (define fy1 as (+ y {D+1}) [fy1])
    (define fx2 as (+ x {D+1}) [fx2])
    (define fy2 as y       [fy2])
    (define tx1 as fx2     [tx1])
    (define ty1 as fy2     [ty1])
    (define tx2 as fx1     [tx2])
    (define ty2 as fy1     [ty2])
    (if (and (== fx1 player-x) (== fy1 player-y)) (do (move-player-to tx1 ty1) (= (get-player) 'dir [r]) (return nil)))
    (if (and (== fx2 player-x) (== fy2 player-y)) (do (move-player-to tx2 ty2) (= (get-player) 'dir [d]) (return nil))))
  [should be called when slope-es has collision with player]
  '(name [slope's name] x [slope's x] y [slope's y] pdir [player's dir]) howto-no)

(define slope-nw-on-collision as (fn (name x y pdir)
    (define fx1 as x       [fx1])
    (define fy1 as (- y {D+1}) [fy1])
    (define fx2 as (- x {D+1}) [fx2])
    (define fy2 as y       [fy2])
    (define tx1 as fx2     [tx1])
    (define ty1 as fy2     [ty1])
    (define tx2 as fx1     [tx2])
    (define ty2 as fy1     [ty2])
    (if (and (== fx1 player-x) (== fy1 player-y)) (do (move-player-to tx1 ty1) (= (get-player) 'dir [l]) (return nil)))
    (if (and (== fx2 player-x) (== fy2 player-y)) (do (move-player-to tx2 ty2) (= (get-player) 'dir [u]) (return nil))))
  [should be called when slope-nw has collision with player]
  '(name [slope's name] x [slope's x] y [slope's y] pdir [player's dir]) howto-no)

(define slope-sw-on-collision as (fn (name x y pdir)
    (define fx1 as x       [fx1])
    (define fy1 as (+ y {D+1}) [fy1])
    (define fx2 as (- x {D+1}) [fx2])
    (define fy2 as y       [fy2])
    (define tx1 as fx2     [tx1])
    (define ty1 as fy2     [ty1])
    (define tx2 as fx1     [tx2])
    (define ty2 as fy1     [ty2])
    (if (and (== fx1 player-x) (== fy1 player-y)) (do (move-player-to tx1 ty1) (= (get-player) 'dir [l]) (return nil)))
    (if (and (== fx2 player-x) (== fy2 player-y)) (do (move-player-to tx2 ty2) (= (get-player) 'dir [d]) (return nil))))
  [should be called when slope-sw has collision with player]
  '(name [slope's name] x [slope's x] y [slope's y] pdir [player's dir]) howto-no)

(define exit-change-to-animation as (fn (x y isPass)
    (if (or (nil? x) (nil? y)) return)
    (define slot as (level-get-slot x y) [slot at x y, the wall to be])
    (animation-remove (find slot 'name))
    (define id as (string-format [exit-{}-{}] x y) [id])
    (animation-add (find slot 'name)
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    (vector {D+0} (if isPass {D+32} {D+48}) {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
    (animation-playing id true))
  [Make exit to show the named animation]
  '(x [x of exit] y [y of exit] isPass [true or false]) howto-no)

(define pass-or-fail-level as (fn ()
    (animation-remove (find (level-get-slot player-x player-y) 'name))

    (if (< (find (get-player) 'number-of-keys) level-number-of-keys)
      (do
        (exit-change-to-animation active-exit-x active-exit-y false)
        (= level-restart-pending {D+10})
        (return nil)))

    (for slot in level
         (if (starts-with? (find slot 'name) [toggle])
           (if (toggle-open? slot)
             (do
               (exit-change-to-animation active-exit-x active-exit-y false)
               (= level-restart-pending {D+10})
               (return nil)))))

    ; Level is passed
    (exit-change-to-animation active-exit-x active-exit-y true)
    (= current-state [ingame-tween-out])
    (tween-level-out))
  [Move to next level or restart current] '() howto-no)

(define on-collision as (fn (tx ty dir)
    (define slot as (level-get-slot tx ty) [slot at tx ty, the thing collided with])
    (define name as (find slot 'name) [name])

    (define side as (dir-to-side dir) [on which side is player of the target])

    (select
     (starts-with? name [exit])              (do (= active-exit-x tx) (= active-exit-y ty) (= pass-or-fail-level-pending true))
        (starts-with? name [pullable])          (pullable-on-collision name slot side)
        (starts-with? name [stop-counter])      (stop-counter-on-collision name tx ty)
        (starts-with? name [bomb])              (bomb-on-collision name tx ty)
        (starts-with? name [toggle])            (toggle-on-collision name tx ty dir)
        (starts-with? name [key])               (do (key-on-collision name tx ty) (set-player-dir dir))
        (starts-with? name [turnstile-ew])      (turnstile-ew-on-collision name tx ty dir)
        (starts-with? name [turnstile-we])      (turnstile-we-on-collision name tx ty dir)
        (starts-with? name [turnstile-sn])      (turnstile-sn-on-collision name tx ty dir)
        (starts-with? name [turnstile-ns])      (turnstile-ns-on-collision name tx ty dir)
        (starts-with? name [stop-turnstile-ew]) (stop-turnstile-ew-on-collision name tx ty dir)
        (starts-with? name [stop-turnstile-we]) (stop-turnstile-we-on-collision name tx ty dir)
        (starts-with? name [stop-turnstile-sn]) (stop-turnstile-sn-on-collision name tx ty dir)
        (starts-with? name [stop-turnstile-ns]) (stop-turnstile-ns-on-collision name tx ty dir)
        (starts-with? name [slope-en])          (slope-en-on-collision name tx ty dir)
        (starts-with? name [slope-es])          (slope-es-on-collision name tx ty dir)
        (starts-with? name [slope-nw])          (slope-nw-on-collision name tx ty dir)
        (starts-with? name [slope-sw])          (slope-sw-on-collision name tx ty dir)))
  [on-collision] '(tx [tx] ty [ty] dir [player's direction]) howto-no)

(define pullable-on-collision as (fn (name slot side)

    (select
        (starts-with? name [pullable-ensw-]) nil ; NOP
        (starts-with? name [pullable-e-])   (if (not (== side [r])) (return))
        (starts-with? name [pullable-en-])  (if (not (or (== side [r]) (== side [u]))) (return))
        (starts-with? name [pullable-ens-]) (if (not (or (== side [r]) (== side [u]) (== side [d]))) (return))
        (starts-with? name [pullable-enw-]) (if (not (or (== side [r]) (== side [u]) (== side [l]))) (return))
        (starts-with? name [pullable-es-])  (if (not (or (== side [r]) (== side [d]))) (return))
        (starts-with? name [pullable-esw-]) (if (not (or (== side [r]) (== side [d]) (== side [l]))) (return))
        (starts-with? name [pullable-ew-])  (if (not (or (== side [r]) (== side [l]))) (return))
        (starts-with? name [pullable-n-])   (if (not (== side [u])) (return))
        (starts-with? name [pullable-ns-])  (if (not (or (== side [u]) (== side [d]))) (return))
        (starts-with? name [pullable-nsw-]) (if (not (or (== side [u]) (== side [d]) (== side [l]))) (return))
        (starts-with? name [pullable-nw-])  (if (not (or (== side [u]) (== side [l]))) (return))
        (starts-with? name [pullable-s-])   (if (not (or (== side [d]))) (return))
        (starts-with? name [pullable-sw-])  (if (not (or (== side [d]) (== side [l]))) (return))
        (starts-with? name [pullable-w-])   (if (not (or (== side [l]))) (return)))

    (do
        (ensure-pullable-in-updatables  name slot)
        (= slot 'player-was-on-side side)))
  [...] '(name [name] slot [slot] side [side]) howto-no)

(define ensure-pullable-in-updatables as (fn (name slot)
    (for i in level-updatable-indices (if (== (ln@ i {D+0}) name) (return nil)))
    (+= level-updatable-indices name slot))
  [...] '(name [name] slot [slot]) howto-no)

(define move-pullable-from-to as (fn (fx fy tx ty)

    (define from-slot as (level-get-slot fx fy) [slot at fx fy])

    (if (not (starts-with? (find from-slot 'name) [pullable-])) (abort [pullable expected]))

    (define to-slot as (level-get-slot tx ty) [slot at tx ty])

    (if (== [] (find to-slot 'name))
        (do (level-move-slot fx fy tx ty)
            (= level-updatable-indices (find (level-get-slot tx ty) 'name) (level-get-slot tx ty)) 
            )))
  [move pullable] '(fx [fx] fy [fy] tx [tx] ty [ty]) howto-no)

(define move-pullable-up as (fn (x y)
    (move-pullable-from-to x y x (- y {D+1})))
  [...] '(x [x] y [y]) howto-no)

(define move-pullable-down as (fn (x y)
    (move-pullable-from-to x y x (+ y {D+1})))
  [...] '(x [x] y [y]) howto-no)

(define move-pullable-left as (fn (x y)
    (move-pullable-from-to x y (- x {D+1}) y))
  [...] '(x [x] y [y]) howto-no)

(define move-pullable-right as (fn (x y)
    (move-pullable-from-to x y (+ x {D+1}) y))
  [...] '(x [x] y [y]) howto-no)

(define reverse-side as (fn (side)
    (select 
        (== [u] side) [d]
        (== [d] side) [u]
        (== [l] side) [r]
        (== [r] side) [l]))
  [...] '(side [side to reverse]) howto-ok)

(define move-player-to as (fn (tx ty)
    (if (are-coordinates-out-of-level tx ty)
        (level-restart)
        (if (== [] (find (level-get-slot tx ty) 'name))
            (do
                (level-move-slot player-x player-y tx ty)
                (= player-x tx)
                (= player-y ty)
                )
             (do
                (define tmpDir as (find (get-player) 'dir) [tmpDir])
                (= (get-player) 'dir nil)
                (on-collision tx ty tmpDir)))))
  [move player] '(tx [tx] ty [ty]) howto-no)

(define entity-new-player as (fn (x y)
     (define id as (string-format [player-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (= player-x x)
     (= player-y y)
     (= (get-player) 'name id)
     (= (get-player) 'x    x)
     (= (get-player) 'y    y)
     (define slot as (level-get-slot x y) [slot at x y, the player to be])
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+0} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [entity-new-player] '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-wall as (fn (x y)
     (define id as (string-format [wall-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the wall to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+336} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [entity-new-wall] '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-stopper as (fn (x y)
     (define id as (string-format [stopper-{}-{}] x y) [id])
     (define slot as (make-empty-slot) [slot at x y, the stopper])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+80} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true)
     (+= level-updatable-indices id slot))
  [entity-new-stopper] '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-toggle as (fn (x y)
     (define id as (string-format [toggle-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the toggle])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+1312} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [entity-new-toggle] '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-slope-en as (fn (x y)
     (define id as (string-format [slope-en-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the slope-en to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+480} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [entity-new-slope-en] '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-slope-es as (fn (x y)
     (define id as (string-format [slope-es-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the slope-es to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+496} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [entity-new-slope-es] '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-slope-nw as (fn (x y)
     (define id as (string-format [slope-nw-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the slope-nw to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+512} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [entity-new-slope-nw] '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-slope-sw as (fn (x y)
     (define id as (string-format [slope-sw-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the slope-sw to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+528} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [entity-new-slope-sw] '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-turnstile-ew as (fn (x y)
     (define id as (string-format [turnstile-ew-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the turnstile-ew to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+368} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [entity-new-turnstile-ew] '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-turnstile-we as (fn (x y)
     (define id as (string-format [turnstile-we-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the turnstile-we to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+352} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [entity-new-turnstile-we] '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-turnstile-sn as (fn (x y)
     (define id as (string-format [turnstile-sn-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the turnstile-sn to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+384} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [entity-new-turnstile-sn] '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-turnstile-ns as (fn (x y)
     (define id as (string-format [turnstile-ns-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the turnstile-ns to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+400} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [entity-new-turnstile-ns] '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-stop-turnstile-ew as (fn (x y)
     (define id as (string-format [stop-turnstile-ew-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the stop-turnstile-ew to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+432} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [entity-new-stop-turnstile-ew] '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-stop-turnstile-we as (fn (x y)
     (define id as (string-format [stop-turnstile-we-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the stop-turnstile-we to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+416} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [entity-new-stop-turnstile-we] '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-stop-turnstile-sn as (fn (x y)
     (define id as (string-format [stop-turnstile-sn-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the stop-turnstile-sn to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+448} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [entity-new-stop-turnstile-sn] '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-stop-turnstile-ns as (fn (x y)
     (define id as (string-format [stop-turnstile-ns-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the stop-turnstile-ns to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+464} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [entity-new-stop-turnstile-ns] '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-exit as (fn (x y)
     (define id as (string-format [exit-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the exit to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+16} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [entity-new-exit] '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-pullable-ensw as (fn (x y)
     (define id as (string-format [pullable-ensw-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the pullable-ensw to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+96} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [Add entity that can be pulled to up, down, left and right]
  '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-pullable-e as (fn (x y)
     (define id as (string-format [pullable-e-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the pullable-e to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+112} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [Add entity that can be pulled to right] '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-pullable-en as (fn (x y)
     (define id as (string-format [pullable-en-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the pullable-en to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+128} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [Add entity that can be pulled to right and up]
  '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-pullable-ens as (fn (x y)
     (define id as (string-format [pullable-ens-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the pullable-ens to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+144} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [Add entity that can be pulled to right, up and down]
  '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-pullable-enw as (fn (x y)
     (define id as (string-format [pullable-enw-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the pullable-enw to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+160} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [Add entity that can be pulled to right, up and left]
  '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-pullable-es as (fn (x y)
     (define id as (string-format [pullable-es-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the pullable-es to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+176} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [Add entity that can be pulled to right and down]
  '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-pullable-esw as (fn (x y)
     (define id as (string-format [pullable-esw-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the pullable-esw to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+192} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [Add entity that can be pulled to right, down and left]
  '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-pullable-ew as (fn (x y)
     (define id as (string-format [pullable-ew-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the pullable-ew to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+208} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [Add entity that can be pulled to right and left]
  '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-pullable-n as (fn (x y)
     (define id as (string-format [pullable-n-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the pullable-n to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+224} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [Add entity that can be pulled to up]
  '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-pullable-ns as (fn (x y)
     (define id as (string-format [pullable-ns-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the pullable-ns to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+240} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [Add entity that can be pulled to up and down]
  '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-pullable-nsw as (fn (x y)
     (define id as (string-format [pullable-nsw-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the pullable-nsw to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+256} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [Add entity that can be pulled to up, down and left]
  '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-pullable-nw as (fn (x y)
     (define id as (string-format [pullable-nw-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the pullable-nw to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+272} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [Add entity that can be pulled to up and left]
  '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-pullable-s as (fn (x y)
     (define id as (string-format [pullable-s-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the pullable-s to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+288} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [Add entity that can be pulled to down]
  '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-pullable-sw as (fn (x y)
     (define id as (string-format [pullable-sw-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the pullable-sw to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+304} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [Add entity that can be pulled to down and left]
  '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-pullable-w as (fn (x y)
     (define id as (string-format [pullable-w-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the pullable-w to be])
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+320} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [Add entity that can be pulled to left]
  '(x [x-coordinate] y [y-coordinate]) howto-no)

(define entity-new-stop-counter as (fn (x y count)
     (define id as (string-format [stop-counter-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the stop-counter to be])
     (= slot 'count count)
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    (vector {D+0} (+ {D+688} (* count {D+16})) {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [entity-new-stop-counter]
  '(x [x-coordinate] y [y-coordinate] count [current count]) howto-no)

(define entity-new-pass-counter as (fn (x y count)
     (define id as (string-format [pass-counter-{}-{}] x y) [id])
     (+= pass-counters id (make-empty-slot))
     (define slot as (ln@ pass-counters id 'hash) [slot])
     (= slot 'count count)
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    (vector {D+0} (+ {D+528} (* count {D+16})) {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [entity-new-pass-counter]
  '(x [x-coordinate] y [y-coordinate] count [current count]) howto-no)

(define pass-counter-decrease as (fn (slot)
    (define x             as (find slot 'x)             [x])
    (define y             as (find slot 'y)             [y])
    (define count         as (find slot 'count)         [count])
    (define name          as (find slot 'name)          [name])
    (define removePending as (find slot 'removePending) [removePending])

    (if removePending (return))

    (if (== {D+1} count)
        (do
            (= slot 'removePending true)
            (pass-counter-update slot {D+0})
            (return nil)))

    (-- count)
    (= slot 'count count)
    (= slot 'decreasePending false)

    (animation-remove name)

    (animation-add name
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    (vector {D+0} (+ {D+528} (* count {D+16})) {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing name true))
  [decrease a pass counter] '(slot [slot for the pass counter]) howto-no)

(define pass-counter-update as (fn (slot dt)
    (define x               as (find slot 'x)               [x])
    (define y               as (find slot 'y)               [y])
    (define name            as (find slot 'name)            [name])
    (define decreasePending as (find slot 'decreasePending) [tmp])
    (define removePending   as (find slot 'removePending)   [tmp])

    (if removePending
        (do
            (if (level-is-slot-empty? x y) (do
                (animation-remove name)
                (-= pass-counters name)
                (entity-new-wall x y)))
            (return nil)))

    (if decreasePending
        (do
            (if (or (!= player-x x) (!= player-y y)) (pass-counter-decrease slot))
            (return nil)))

    (if (and (== player-x x) (== player-y y)) (= slot 'decreasePending true)))
  [update a pass counter] '(slot [slot for the pass counter] dt [delta time]) howto-no)

(define entity-new-bomb as (fn (x y count)
     (define id as (string-format [bomb-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the bomb to be])
     (= slot 'count count)
     (= slot 'bomb-original-count count)
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    (vector {D+0} (+ {D+848} (* count {D+16})) {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true)
     (+= level-updatable-indices id slot))
  [entity-new-bomb] '(x [x-coordinate] y [y-coordinate] count [current count]) howto-no)

(define entity-new-key as (fn (x y)
     (define id as (string-format [key-{}-{}] x y) [id])
     (level-set-slot x y (make-empty-slot))
     (define slot as (level-get-slot x y) [slot at x y, the key to be])
     (++ level-number-of-keys)
     (= slot 'name id)
     (= slot 'x    x)
     (= slot 'y    y)
     (animation-add id
                    (ln@ slot 'sx 'hash)
                    (ln@ slot 'sy 'hash)
                    (ln@ slot 'sw 'hash)
                    (ln@ slot 'sh 'hash)
                    (ln@ slot 'tx 'hash)
                    (ln@ slot 'ty 'hash)
                    (ln@ slot 'tw 'hash)
                    (ln@ slot 'th 'hash)
                    []
                    {D+0}
                    '({D+0} {D+64} {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
     (animation-playing id true))
  [Create new key] '(x [x-coordinate] y [y-coordinate]) howto-no)

(define levels as '(

    ; ========== 1. level ==========
    (fn ()
    ; Top row
    (entity-new-player {D-6} {D+0})
    (entity-new-exit   {D+6} {D+0}))



    ; ========== 2. level ==========
    (fn ()
    ; Top row
    (entity-new-player {D-6} {D+0})
    (entity-new-key    {D+0} {D+0})
    (entity-new-exit   {D+6} {D+0}))



    ; ========== 3. level ==========
    (fn ()
    ; Top row
    (entity-new-wall    {D-6} {D+0})
    (entity-new-key     {D-5} {D+0})
    (entity-new-player  {D-2} {D+0})
    (entity-new-key     {D+0} {D+0})
    (entity-new-exit    {D+6} {D+0}))



    ; ========== 4. level ==========
    (fn ()
    ; Top row
    (entity-new-wall          {D+0} {D-5})
    (entity-new-stop-counter  {D+2} {D-5} {D+1})

    ; 2. row
    (entity-new-stop-counter {D-4} {D-4} {D+1})
    (entity-new-stop-counter {D+4} {D-4} {D+1})

    ; 3. row
    (entity-new-wall         {D-1} {D-3})
    (entity-new-wall         {D+1} {D-3})

    ; 4. row
    (entity-new-stop-counter {D-5} {D-2} {D+1})
    (entity-new-key          {D-2} {D-2})
    (entity-new-wall         {D-1} {D-2})
    (entity-new-wall         {D+1} {D-2})
    (entity-new-key          {D+2} {D-2})

    ; 5. row
    (for i from {D-3} to {D-1} (entity-new-wall i {D-1}))
    (for i from {D+1} to {D+3} (entity-new-wall i {D-1}))

    ; 6. row
    (entity-new-wall         {D-5} {D+0})
    (entity-new-player       {D+0} {D+0})
    (entity-new-wall         {D+5} {D+0})

    ; 7. row
    (for i from {D-3} to {D-1} (entity-new-wall i {D+1}))
    (for i from {D+1} to {D+3} (entity-new-wall i {D+1}))

    ; 8. row
    (entity-new-stop-counter  {D+5}  {D+2} {D+1})
    (entity-new-key           {D-2}  {D+2})
    (entity-new-wall          {D-1}  {D+2})
    (entity-new-wall          {D+1}  {D+2})
    (entity-new-key           {D+2}  {D+2})

    ; 9. row
    (entity-new-wall          {D-1}  {D+3})
    (entity-new-wall          {D+1}  {D+3})

    ; 10. row
    (entity-new-stop-counter  {D-4}  {D+4} {D+1})
    (entity-new-stop-counter  {D+4}  {D+4} {D+1})

    ; Last row
    (entity-new-exit          {D-4}  {D+5})
    (entity-new-stop-counter  {D-2}  {D+5} {D+1})
    (entity-new-wall          {D+0}  {D+5}))


    ; ========== 5. level ==========
    (fn ()
    ; Top row
    (entity-new-slope-es   {D+0} {D-4})
    (entity-new-slope-sw   {D+5} {D-4})

    ; 2. row
    ;-

    ; 3. row
    (entity-new-bomb      {D-4} {D-2} {D+9})

    ; 4. row
    (entity-new-exit         {D-6} {D-1})
    (entity-new-turnstile-ns {D-3} {D-1})
    (entity-new-player       {D+0} {D-1})
    (entity-new-pass-counter {D+5} {D-1} {D+2})

    ; 5. row
    (entity-new-wall          {D+3} {D+0})

    ; 6. row
    (entity-new-wall         {D-2} {D+1})

    ; 7. row
    (entity-new-wall         {D-5} {D+2})
    (entity-new-wall         {D+2} {D+2})

    ; 8. row
    (entity-new-key          {D-3} {D+3})

    ; 9. row
    (entity-new-wall         {D-3} {D+4})
    (entity-new-slope-en     {D+0} {D+4})
    (entity-new-slope-nw     {D+5} {D+4})

    ; 10. row
    (entity-new-wall         {D-1} {D+5}))



    ; ========== 6. level ==========
    (fn ()
    ; Top row
    (entity-new-wall      {D-7}  {D-7})

    ; 2. row
    (entity-new-wall      {D-2}  {D-6})
    (entity-new-key       {D-1}  {D-6})
    (entity-new-slope-sw  {D+2}  {D-6})

    ; 3. row
    (entity-new-wall      {D+5}  {D-5})

    ; 4. row
    (entity-new-wall      {D-5}  {D-4})
    (entity-new-wall      {D-4}  {D-4})
    (entity-new-wall      {D+0}  {D-4})
    (entity-new-wall      {D+1}  {D-4})

    ; 5. row
    (entity-new-wall          {D-6}  {D-3})
    (entity-new-key           {D-4}  {D-3})
    (entity-new-turnstile-we  {D-3}  {D-3})
    (entity-new-turnstile-ns  {D-1}  {D-3})
    (entity-new-key           {D+0}  {D-3})
    (entity-new-wall          {D+2}  {D-3})

    ; 6. row
    (entity-new-slope-es      {D-8}  {D-2})
    (entity-new-turnstile-ew  {D-6}  {D-2})
    (entity-new-wall          {D-2}  {D-2})
    (entity-new-turnstile-we  {D+2}  {D-2})
    (entity-new-turnstile-we  {D+4}  {D-2})
    (entity-new-bomb          {D+6}  {D-2} {D+27})

    ; 7. row
    (entity-new-wall          {D-6}  {D-1})
    (entity-new-wall          {D+2}  {D-1})
    (entity-new-exit          {D+8}  {D-1})

    ; 8. row
    (entity-new-wall          {D-6}   {D+0})
    (entity-new-wall          {D+2}   {D+0})

    ; 9. row
    (entity-new-wall          {D-8}   {D+1})
    (entity-new-wall          {D-5}   {D+1})
    (entity-new-wall          {D+1}   {D+1})
    (entity-new-slope-nw      {D+6}   {D+1})

    ; 10. row
    (entity-new-wall          {D-4}   {D+2})
    (entity-new-wall          {D-0}   {D+2})

    ; 11. row
    (entity-new-wall          {D-7}   {D+3})
    (entity-new-wall          {D-3}   {D+3})
    (entity-new-wall          {D-1}   {D+3})
    (entity-new-wall          {D+3}   {D+3})

    ; 12. row
    (entity-new-turnstile-sn  {D-2}   {D+4})

    ; 13. row
    (entity-new-wall          {D+1}   {D+5})

    ; 14. row
    (entity-new-wall          {D-5}   {D+6})

    ; Bottom row
    (entity-new-player        {D-8}   {D+7})
    (entity-new-wall          {D-1}   {D+7}))



    ; ========== 7. level ==========
    (fn ()
    ; top row
    (for i from {D-8} to {D+0} (entity-new-wall i {D-6}))

    ; next row
    (entity-new-wall   {D-8} {D-5})
    (entity-new-player {D-7} {D-5})
    (for i from {D+0} to {D+7} (entity-new-wall  i {D-5}))

    ; Third row from top
    (entity-new-wall  {D-8} {D-4})
    (entity-new-wall  {D+7} {D-4})

    ; Fourth row from top
    (entity-new-wall {D-8} {D-3})
    (entity-new-pullable-ensw {D+6} {D-3})
    (entity-new-wall  {D+7} {D-3})

    ; Fifth
    (entity-new-wall {D-8} {D-2})
    (entity-new-wall {D-5} {D-2})
    (entity-new-wall {D-4} {D-2})
    (for i from {D-3} to {D-1} (entity-new-pullable-ensw i {D-2}))
    (entity-new-wall {D+0} {D-2})
    (entity-new-wall {D+1} {D-2})
    (entity-new-pullable-ensw {D+2} {D-2})
    (entity-new-wall {D+3} {D-2})
    (entity-new-wall {D+4} {D-2})
    (entity-new-wall {D+7} {D-2})

    ; Sixth
    (entity-new-wall {D-8} {D-1})
    (entity-new-wall {D-5} {D-1})
    (entity-new-wall {D-4} {D-1})
    (entity-new-pullable-ensw {D-3} {D-1})
    (entity-new-pullable-ensw {D-2} {D-1})
    (for i from {D-1} to {D+1} (entity-new-wall i {D-1}))
    (entity-new-pullable-ensw {D+2} {D-1})
    (entity-new-wall {D+3} {D-1})
    (entity-new-wall {D+4} {D-1})
    (entity-new-wall {D+7} {D-1})

    ; Seventh
    (entity-new-wall {D-8} {D+0})
    (entity-new-wall {D-5} {D+0})
    (entity-new-wall {D-4} {D+0})
    (for i from {D-3} to {D+2} (entity-new-pullable-ensw i {D+0}))
    (entity-new-wall {D+3} {D+0})
    (entity-new-wall {D+4} {D+0})
    (entity-new-wall {D+7} {D+0})

    ; Eight
    (entity-new-wall {D-8} {D+1})
    (entity-new-wall {D-5} {D+1})
    (entity-new-wall {D-4} {D+1})
    (entity-new-pullable-ensw {D-3} {D+1})
    (entity-new-pullable-ensw {D-2} {D+1})

    (entity-new-exit  {D+0} {D+1})

    (entity-new-pullable-ensw {D+2} {D+1})
    (entity-new-wall {D+3} {D+1})
    (entity-new-wall {D+4} {D+1})
    (entity-new-wall {D+7} {D+1})

    ; Ninth
    (entity-new-wall {D-8} {D+2})
    (entity-new-wall {D-5} {D+2})
    (entity-new-wall {D-4} {D+2})
    (entity-new-pullable-ensw {D-3} {D+2})
    (entity-new-pullable-ensw {D-2} {D+2})
    (for i from {D-1} to {D+1} (entity-new-wall i {D+2}))
    (entity-new-pullable-ensw {D+2} {D+2})
    (entity-new-wall {D+3} {D+2})
    (entity-new-wall {D+4} {D+2})
    (entity-new-wall {D+7} {D+2})

    ; Tenth
    (entity-new-wall          {D-8} {D+3})
    (entity-new-pullable-ensw {D+6} {D+3})
    (entity-new-wall          {D+7} {D+3})

    ; Eleventh
    (entity-new-wall {D-8} {D+4})
    (entity-new-wall {D-7} {D+4})
    (entity-new-wall {D+7} {D+4})

    ; Bottom row
    (for i from {D-7} to {D+7} (entity-new-wall i {D+5})))



    ; ========== 8. level ==========
    (fn ()
    ; Top row
    (for i from {D-7} to {D-3} (entity-new-wall i {D-4}))
    (for i from {D-1} to {D+1} (entity-new-wall i {D-4}))

    ; 2. row
    (entity-new-wall {D-7} {D-3})
    (entity-new-wall {D+0} {D-3})

    ; 3. row
    (entity-new-wall         {D-7} {D-2}  )
    (entity-new-wall         {D+0} {D-2}  )
    (entity-new-pass-counter {D+1} {D-2} {D+2})

    ; 4. row
    (entity-new-exit         {D-8} {D-1}  )
    (entity-new-pass-counter {D-3} {D-1} {D+4})
    (entity-new-turnstile-ew {D+0} {D-1}  )
    (entity-new-pass-counter {D+4} {D-1} {D+2})
    (entity-new-slope-sw     {D+6} {D-1}  )

    ; 5. row
    (entity-new-wall         {D-6} {D+0})
    (entity-new-player       {D-5} {D+0})
    (entity-new-wall         {D+0} {D+0})
    (entity-new-wall         {D+8} {D+0})

    ; 6. row
    (entity-new-wall          {D-6} {D+1}  )
    (entity-new-turnstile-we  {D+0} {D+1}  )
    (entity-new-stop-counter  {D+3} {D+1} {D+4})
    (entity-new-slope-nw      {D+6} {D+1}  )

    ; 7. row
    (entity-new-wall         {D-6} {D+2}  )
    (entity-new-pass-counter {D-4} {D+2} {D+1})

    ; 8. row
    (entity-new-wall         {D-6} {D+3}  )
    (entity-new-stop-counter {D-2} {D+3} {D+1})
    (entity-new-wall         {D+0} {D+3}  )
    (entity-new-key          {D+7} {D+3}  )

    ; Last row
    (entity-new-wall         {D-6} {D+4} )
    (entity-new-wall         {D-5} {D+4} )
    (entity-new-wall         {D+0} {D+4} )
    (entity-new-stop-counter {D+1} {D+4} {D+1})
    (entity-new-wall         {D+7} {D+4} ))



    ; ========== 9. level ==========
    (fn ()
    ; Top row
    (entity-new-exit          {D+0}  {D-9})

    (for i from {D-7} to {D+7} (entity-new-pullable-ensw i  {D-7}))

    (for i from {D-7} to {D+7} (entity-new-pullable-ensw i  {D-6}))

    (for i from {D-7} to {D+7} (entity-new-pullable-ensw i  {D-5}))

    (for i from {D-7} to {D+7} (entity-new-pullable-ensw i  {D-4}))

    (for i from {D-7} to {D-2} (entity-new-pullable-ensw i  {D-3}))
    (for i from {D+2} to {D+7} (entity-new-pullable-ensw i  {D-3}))

    (for i from {D-7} to {D-3} (entity-new-pullable-ensw i  {D-2}))
    (for i from {D+3} to {D+7} (entity-new-pullable-ensw i  {D-2}))

    (for i from {D-7} to {D-4} (entity-new-pullable-ensw i  {D-1}))
    (for i from {D+4} to {D+7} (entity-new-pullable-ensw i  {D-1}))

    (entity-new-exit {D-9} {D+0})
    (for i from {D-7} to {D-4} (entity-new-pullable-ensw i   {D+0}))
    (entity-new-player {D+0} {D+0})
    (for i from  {D+4} to  {D+7} (entity-new-pullable-ensw i   {D+0}))
    (entity-new-exit  {D+9} {D+0})

    (for i from {D-7} to {D-4} (entity-new-pullable-ensw i   {D+1}))
    (for i from {D+4} to {D+7} (entity-new-pullable-ensw i   {D+1}))

    (for i from {D-7} to {D-3} (entity-new-pullable-ensw i   {D+2}))
    (for i from {D+3} to {D+7} (entity-new-pullable-ensw i   {D+2}))

    (for i from {D-7} to {D-2} (entity-new-pullable-ensw i   {D+3}))
    (for i from {D+2} to {D+7} (entity-new-pullable-ensw i   {D+3}))

    (for i from {D-7} to {D+7} (entity-new-pullable-ensw i   {D+4}))

    (for i from {D-7} to {D+7} (entity-new-pullable-ensw i   {D+5}))

    (for i from {D-7} to {D+7} (entity-new-pullable-ensw i   {D+6}))

    (for i from {D-7} to {D+7} (entity-new-pullable-ensw i   {D+7}))

    (entity-new-exit {D+0} {D+9}))



    ; ========== 10. level ==========
    (fn ()
    ; Top row
    (entity-new-wall {D+1} {D-8})

    ; 2. row
    (entity-new-wall {D-3} {D-7})
    (entity-new-key  {D-1} {D-7})

    ; 5. row
    (entity-new-wall {D-6} {D-4})

    ; 6. row
    (entity-new-wall {D-7} {D-3})
    (entity-new-wall {D+2} {D-3})
    (entity-new-wall {D+6} {D-3})

    ; 7. row
    (entity-new-wall {D-5} {D-2})

    ; 8.row
    (entity-new-wall {D-7} {D-1})
    (entity-new-wall {D-4} {D-1})

    ; 9. row
    (entity-new-key          {D-7} {D+0})
    (entity-new-wall         {D-6} {D+0})
    (entity-new-wall         {D-3} {D+0})
    (entity-new-pass-counter {D+4} {D+0} {D+1})
    (entity-new-wall         {D+5} {D+0})
    (entity-new-exit         {D+8} {D+0})

    ; 10. row
    (entity-new-wall         {D-8} {D+1})
    (entity-new-wall         {D-5} {D+1})
    (entity-new-wall         {D-2} {D+1})
    (entity-new-pass-counter {D+6} {D+1} {D+3})

    ; 11. row
    (entity-new-wall         {D-7} {D+2})
    (entity-new-wall         {D-4} {D+2})
    (entity-new-wall         {D-1} {D+2})
    (entity-new-wall         {D+1} {D+2})
    (entity-new-stop-counter {D+7} {D+2} {D+1})

    ; 12. row
    (entity-new-wall         {D-6} {D+3})
    (entity-new-wall         {D-3} {D+3})
    (entity-new-wall         {D+0} {D+3})
    (entity-new-pass-counter {D+3} {D+3} {D+3})
    (entity-new-wall         {D+5} {D+3})
    (entity-new-wall         {D+6} {D+3})

    ; 13. row
    (entity-new-wall        {D-5} {D+4})
    (entity-new-wall        {D-2} {D+4})
    (entity-new-key         {D-1} {D+4})

    ; 14. row
    (entity-new-wall        {D-4} {D+5})
    (entity-new-wall        {D-1} {D+5})
    (entity-new-wall        {D+0} {D+5})

    ; 15. row
    (entity-new-wall        {D-3} {D+6})
    (entity-new-wall        {D+4} {D+6})

    ; 16. row
    (entity-new-wall        {D-2} {D+7})
    (entity-new-wall        {D+0} {D+7})
    (entity-new-wall        {D+2} {D+7})

    ; 17. row
    (entity-new-wall         {D+0} {D+8})
    (entity-new-player       {D+7} {D+8}))



    ; ========== 11. level ==========
    (fn ()
    ; Top to fifth rows
    (for y from {D-8} to {D-4}
         (for x from {D-8} to {D+8} (entity-new-pullable-ensw x y)))

    ; 6. row
    (for x from {D-8} to {D-2} (entity-new-pullable-ensw x {D-3}))
    (for x from {D+2} to {D+8} (entity-new-pullable-ensw x {D-3}))

    ; 7. row
    (for x from {D-8} to {D-3} (entity-new-pullable-ensw x {D-2}))
    (for x from {D+3} to {D+8} (entity-new-pullable-ensw x {D-2}))

    ; 8. row
    (entity-new-exit {D-10} {D-1})
    (for x from {D-8} to {D-4} (entity-new-pullable-ensw x {D-1}))
    (for x from {D+4} to {D+8} (entity-new-pullable-ensw x {D-1}))

    ; 9. row
    (for x from {D-8} to {D-4} (entity-new-pullable-ensw x  {D+0}))
    (entity-new-player {D+0}  {D+0})
    (for x from  {D+4} to  {D+8} (entity-new-pullable-ensw x  {D+0}))

    ; 10. row
    (for x from {D-8} to {D-4} (entity-new-pullable-ensw x  {D+1}))
    (for x from {D+4} to {D+8} (entity-new-pullable-ensw x  {D+1}))

    ; 11. row
    (for x from {D-8} to {D-3} (entity-new-pullable-ensw x  {D+2}))
    (for x from {D+3} to {D+8} (entity-new-pullable-ensw x  {D+2}))

    ; 12. row
    (for x from {D-8} to {D-2} (entity-new-pullable-ensw x  {D+3}))
    (for x from {D+2} to {D+8} (entity-new-pullable-ensw x  {D+3}))

    ; Five bottom rows
    (for y from {D+4} to {D+8}
         (for x from {D-8} to {D+8} (entity-new-pullable-ensw x y))))



    ; ========== 12. level ==========
    (fn ()
    ; Top row
    (entity-new-wall     {D-7}  {D-6})
    (entity-new-wall     {D-6}  {D-6})
    (entity-new-slope-es {D+0}  {D-6})
    (entity-new-slope-sw {D+5}  {D-6})

    ; 2. row
    (entity-new-key      {D-7}  {D-5})
    (entity-new-key      {D-6}  {D-5})

    ; 3. row
    (entity-new-wall         {D-5}  {D-4})
    (entity-new-pass-counter {D-3}  {D-4}  {D+1})
    (entity-new-key          {D+0}  {D-4})
    (entity-new-pullable-w   {D+1}  {D-4})
    (for x from {D+2} to {D+4} (entity-new-wall x {D-4}))

    ; 4. row
    (entity-new-turnstile-we {D+0} {D-3})
    (entity-new-turnstile-we {D+4} {D-3})
    (entity-new-key          {D+6} {D-3})
    (entity-new-slope-sw     {D+7} {D-3})

    ; 5. row
    (entity-new-pass-counter {D-6}  {D-2}  {D+2})
    (entity-new-wall         {D-1}  {D-2})
    (entity-new-wall         {D+0}  {D-2})
    (entity-new-turnstile-ns {D+1}  {D-2})
    (entity-new-wall         {D+4}  {D-2})

    ; 6. row
    (entity-new-key  {D-5} {D-1})
    (entity-new-wall {D-4} {D-1})
    (entity-new-wall {D+0} {D-1})
    (entity-new-wall {D+4} {D-1})

    ; 7. row
    (entity-new-pullable-nw {D+4} {D+0})
    (entity-new-slope-nw    {D+5} {D+0})

    ; 8. row
    (entity-new-pullable-n  {D+1} {D+1})
    (for x from {D+2} to {D+4} (entity-new-wall x {D+1}))

    ; 9. row
    (entity-new-slope-en {D-7} {D+2})
    (entity-new-key      {D-1} {D+2})
    (entity-new-slope-sw {D+6} {D+2})

    ; 10. row
    (entity-new-pass-counter {D-6} {D+3} {D+4})
    (entity-new-turnstile-ns {D+7} {D+3})

    ; 11. row
    (entity-new-wall {D-7} {D+4})

    ; 12. row
    (entity-new-wall     {D-6} {D+5})
    (entity-new-exit     {D-5} {D+5})
    (entity-new-player   {D+0} {D+5})
    (entity-new-slope-nw {D+6} {D+5})
    (entity-new-wall     {D+7} {D+5}))



    ; ========== 13. level ==========
    (fn ()
    ; Top row
    (entity-new-slope-es {D-5} {D-6})
    (entity-new-bomb     {D-1} {D-6} {D+7})

    ; 3. row
    (entity-new-wall      {D+3} {D-4})
    (entity-new-wall      {D+4} {D-4})

    ; 4. row
    (entity-new-wall         {D-3} {D-3})
    (entity-new-pass-counter {D+0} {D-3} {D+1})
    (entity-new-player       {D+3} {D-3})
    (entity-new-slope-sw     {D+7} {D-3})

    ; 6. row
    (entity-new-turnstile-ns  {D+7} {D-1})

    ; 7. row
    (entity-new-bomb {D-5} {D+0} {D+5})
    (entity-new-pass-counter {D-2} {D+0} {D+2})
    (entity-new-slope-nw {D+3} {D+0})

    ; 8. row
    (entity-new-wall {D-7} {D+1})
    (entity-new-key  {D-6} {D+1})
    (entity-new-wall {D-4} {D+1})
    (entity-new-wall {D+6} {D+1})
    (entity-new-exit {D+7} {D+1})

    ; 10. row
    (entity-new-pass-counter {D-1} {D+3} {D+3})

    ; 11. row
    (entity-new-slope-en {D-5} {D+4})

    ; 12. row
    (entity-new-wall {D-1} {D+5}))



    ; ========== 14. level ==========
    (fn ()
    ; Top row
    (for x from {D-9} to {D+9} (entity-new-wall x {D-4}))

    ; 2. row
    (entity-new-wall         {D-9} {D-3})
    (entity-new-stop-counter {D-3} {D-3} {D+1})
    (entity-new-stop-counter {D+1} {D-3} {D+1})
    (entity-new-stop-counter {D+5} {D-3} {D+1})
    (entity-new-key          {D+8} {D-3})
    (entity-new-wall         {D+9} {D-3})

    ; 3. row
    (entity-new-wall                     {D-9} {D-2})
    (for x from {D-7} to {D-6} (entity-new-wall x {D-2}))
    (for x from {D-3} to {D-2} (entity-new-wall x {D-2}))
    (for x from {D+1} to {D+2} (entity-new-wall x {D-2}))
    (for x from {D+5} to {D+7} (entity-new-wall x {D-2}))
    (entity-new-turnstile-ns              {D+8} {D-2})
    (entity-new-wall                      {D+9} {D-2})

    ; 4. row
    (entity-new-wall         {D-9} {D-1})
    (entity-new-pullable-ns  {D-4} {D-1})
    (entity-new-pullable-ns  {D+0} {D-1})
    (entity-new-pullable-ns  {D+4} {D-1})
    (entity-new-wall         {D+9} {D-1})

    ; 5. row
    (for x from {D-9} to {D-5} (entity-new-wall x {D+0}))
    (for x from {D-3} to {D-1} (entity-new-wall x {D+0}))
    (for x from {D+1} to {D+3} (entity-new-wall x {D+0}))
    (for x from {D+5} to {D+7} (entity-new-wall x {D+0}))
    (entity-new-wall                      {D+9} {D+0})

    ; 6. row
    (entity-new-exit         {D-9} {D+1})
    (entity-new-player       {D-7} {D+1})
    (entity-new-slope-sw     {D-3} {D+1})
    (entity-new-slope-sw     {D+1} {D+1})
    (entity-new-slope-sw     {D+5} {D+1})
    (entity-new-wall         {D+9} {D+1})

    ; 7. row
    (entity-new-wall         {D-9} {D+2})
    (entity-new-wall         {D-5} {D+2})
    (entity-new-wall         {D-1} {D+2})
    (entity-new-wall         {D+3} {D+2})
    (entity-new-wall         {D+9} {D+2})

    ; Bottom row
    (for x from {D-9} to {D-5} (entity-new-wall  x {D+3}))
    (entity-new-pullable-n                {D-4} {D+3})
    (for x from {D-3} to {D-1} (entity-new-wall  x {D+3}))
    (entity-new-pullable-n                 {D+0} {D+3})
    (for x from  {D+1} to  {D+3} (entity-new-wall  x {D+3}))
    (entity-new-pullable-n                 {D+4} {D+3})
    (for x from  {D+5} to  {D+9} (entity-new-wall  x {D+3})))



    ; ========== 15. level ==========
    (fn ()
    ; Top row
    (for i from {D-6} to {D+6} (entity-new-wall i {D-6}))

    ; 2. row
    (entity-new-wall {D-6} {D-5})
    (for i from {D-5} to {D+5} (entity-new-stopper i {D-5}))
    (entity-new-wall  {D+6} {D-5})

    ; 3 - 5. row
    (for i from {D-4} to {D-2}
        (entity-new-wall    {D-6} i)
        (entity-new-stopper {D-5} i)
        (entity-new-stopper {D+5} i)
        (entity-new-wall    {D+6} i))

    ; 6. row
    (entity-new-wall     {D-6} {D-1})
    (entity-new-stopper  {D-5} {D-1})
    (for i from {D-3} to {D+3} (entity-new-pullable-ensw i {D-1}))
    (entity-new-stopper  {D+5} {D-1})
    (entity-new-wall     {D+6} {D-1})

    ; 7. row
    (entity-new-wall    {D-6} {D+0})
    (entity-new-stopper {D-5} {D+0})
    (for i from {D-3} to {D+3} step {D+2} (entity-new-pullable-ensw i {D+0}))
    (for i from {D-2} to {D+2} step {D+2} (entity-new-toggle        i {D+0}))
    (entity-new-stopper  {D+5} {D+0})
    (entity-new-wall     {D+6} {D+0})

    ; 8. row
    (entity-new-wall    {D-6} {D+1})
    (entity-new-stopper {D-5} {D+1})
    (for i from {D-3} to {D+3} (entity-new-pullable-ensw i {D+1}))
    (entity-new-stopper  {D+5} {D+1})
    (entity-new-wall     {D+6} {D+1})

    ; 9 - 11. row
    (for i from {D+2} to {D+4}
        (entity-new-wall    {D-6} i)
        (entity-new-stopper {D-5} i)
        (entity-new-stopper {D+5} i)
        (entity-new-wall    {D+6} i))

    (entity-new-player       {D+4} {D+4})

    ; 12. row
    (entity-new-wall {D-6} {D+5})
    (for i from {D-5} to {D+5} (entity-new-stopper i {D+5}))
    (entity-new-wall  {D+6} {D+5})

    ; Bottom row
    (for i from {D-6} to {D-1} (entity-new-wall i {D+6}))
    (entity-new-exit {D+0} {D+6})
    (for i from  {D+1} to  {D+6} (entity-new-wall i {D+6})))



    ; ========== 16. level ==========
    (fn ()
    ; Top row
    (for x from {D-8} to {D+8} (entity-new-wall x {D-5}))

    ; 2. row
    (entity-new-wall         {D-8} {D-4})
    (entity-new-wall         {D-4} {D-4})
    (entity-new-wall         {D+1} {D-4})
    (entity-new-turnstile-we {D+4} {D-4})
    (entity-new-bomb         {D+8} {D-4} {D+5})

    ; 3. row
    (entity-new-bomb         {D-8} {D-3} {D+5})
    (entity-new-player       {D-7} {D-3})
    (entity-new-turnstile-ew {D-4} {D-3})
    (entity-new-wall         {D+1} {D-3})
    (entity-new-pass-counter {D+2} {D-3} {D+2})
    (entity-new-turnstile-ew {D+4} {D-3})
    (entity-new-wall         {D+8} {D-3})

    ; 4. row
    (entity-new-wall         {D-8} {D-2})
    (entity-new-turnstile-we {D-4} {D-2})
    (entity-new-pass-counter {D-3} {D-2} {D+2})
    (entity-new-pass-counter {D-1} {D-2} {D+2})
    (entity-new-turnstile-ew {D+1} {D-2})
    (entity-new-wall         {D+4} {D-2})
    (entity-new-pass-counter {D+5} {D-2} {D+3})
    (entity-new-key          {D+6} {D-2})
    (entity-new-bomb         {D+8} {D-2} {D+5})

    ; 5. row
    (entity-new-wall                      {D-8} {D-1})
    (for x from {D-4} to {D-2} (entity-new-wall  x {D-1}))
    (entity-new-turnstile-we               {D+1} {D-1})
    (entity-new-bomb                       {D+4} {D-1} {D+5})
    (entity-new-pass-counter               {D+5} {D-1} {D+2})
    (entity-new-wall                       {D+8} {D-1})

    ; 6. row
    (entity-new-wall                      {D-8} {D+0})
    (entity-new-wall                      {D-4} {D+0})
    (entity-new-wall                      {D+1} {D+0})
    (entity-new-wall                      {D+4} {D+0})
    (entity-new-wall                      {D+8} {D+0})

    ; 7. row
    (entity-new-wall                      {D-8} {D+1})
    (entity-new-pass-counter              {D-5} {D+1} {D+2})
    (entity-new-wall                      {D-4} {D+1})
    (entity-new-wall                      {D+1} {D+1})
    (for x from {D+4} to {D+8} (entity-new-wall    x    {D+1}))

    ; 8. row
    (for x from {D-8} to {D-7} (entity-new-wall  x    {D+2}))
    (entity-new-turnstile-ns                     {D-6} {D+2})
    (for x from {D-5} to {D-4} (entity-new-wall  x     {D+2}))
    (entity-new-pass-counter                     {D-3} {D+2} {D+1})
    (entity-new-wall                             {D-2} {D+2})
    (for x from {D+1} to {D+2} (entity-new-wall  x     {D+2}))
    (entity-new-turnstile-ns                     {D+3} {D+2})
    (entity-new-wall                             {D+4} {D+2})
    (entity-new-wall                             {D+8} {D+2})

    ; 9. row
    (entity-new-exit                      {D-8} {D+3})
    (entity-new-wall                      {D-2} {D+3})
    (entity-new-wall                      {D+1} {D+3})
    (entity-new-wall                      {D+8} {D+3})

    ; Bottom row
    (entity-new-slope-en                  {D-6} {D+4})
    (entity-new-bomb                      {D-2} {D+4} {D+20})
    (entity-new-slope-sw                  {D-1} {D+4})
    (for x from {D+0} to {D+8} (entity-new-wall   x     {D+4})))



    ; ========== 17. level ==========
    (fn ()
    ; Top row
    (for x from {D-5} to {D+5} (entity-new-wall x {D-9}))

    ; 2. row
    (entity-new-wall {D-5} {D-8})
    (entity-new-wall {D+5} {D-8})

    ; 3. row
    (entity-new-wall {D-5} {D-7})
    (entity-new-wall {D+5} {D-7})

    ; 4. row
    (for x from {D-5} to {D+1} (entity-new-wall x {D-6}))
    (for x from {D+4} to {D+5} (entity-new-wall x {D-6}))

    ; 5. row
    (entity-new-wall                              {D-5} {D-5})
    (entity-new-exit                              {D-4} {D-5})
    (for x from {D-3} to {D+0} (entity-new-pullable-ensw x     {D-5}))
    (entity-new-wall                              {D+1} {D-5})
    (entity-new-wall                              {D+5} {D-5})

    ; 6 - 10. rows
    (for y from {D-4} to {D+0}
        (entity-new-wall                               {D-5} y)
        (for x from {D-4} to {D+0} (entity-new-pullable-ensw  x y))
        (entity-new-wall                               {D+1} y)
        (entity-new-wall                               {D+5} y))

    ; 11. row
    (entity-new-wall                                     {D-5} {D+1})
    (for x from {D-4} to {D+1} (entity-new-pullable-ensw x     {D+1}))
    (entity-new-wall                                     {D+5} {D+1})

    ; 12. row
    (entity-new-wall {D-5} {D+2})
    (entity-new-wall {D+5} {D+2})

    ; 13. row
    (entity-new-wall {D-5} {D+3})
    (for x from {D+4} to {D+5} (entity-new-wall x {D+3}))

    ; 14. row
    (entity-new-wall {D-5} {D+4})
    (entity-new-wall {D+5} {D+4})

    ; 15. row
    (entity-new-wall   {D-5} {D+5})
    (entity-new-player {D+1} {D+5})
    (entity-new-wall   {D+5} {D+5})

    ; 16. row
    (entity-new-wall                     {D-5} {D+6})
    (for x from {D-3} to {D+2} (entity-new-wall x     {D+6}))
    (entity-new-wall                     {D+5} {D+6})

    ; 17. row
    (entity-new-wall {D-5} {D+7})
    (entity-new-wall {D+5} {D+7})

    ; 18. row
    (for x from {D-5} to {D+5} (entity-new-wall x {D+8})))



    ; ========== 18. level ==========
    (fn ()
    ; Top row
    (for i from {D-6} to {D+6} (entity-new-stopper i  {D-6}))

    ; 2. row
    (entity-new-stopper {D-6} {D-5})
    (entity-new-stopper {D+6} {D-5})

    ; 3. row
    (entity-new-stopper {D-6} {D-4})
    (for i from {D-4} to {D-2} (entity-new-pullable-ensw i {D-4}))
    (for i from {D+2} to {D+4} (entity-new-pullable-ensw i {D-4}))
    (entity-new-stopper  {D+6} {D-4})

    ; 4. row
    (entity-new-stopper {D-6} {D-3})
    (entity-new-pullable-ensw {D-4} {D-3})
    (entity-new-toggle        {D-3} {D-3})
    (entity-new-pullable-ensw {D-2} {D-3})
    (entity-new-pullable-ensw {D-1} {D-3})
    (entity-new-pullable-ensw {D+1} {D-3})
    (entity-new-pullable-ensw {D+2} {D-3})
    (entity-new-toggle        {D+3} {D-3})
    (entity-new-pullable-ensw {D+4} {D-3})
    (entity-new-stopper       {D+6} {D-3})

    ; 5. row
    (entity-new-stopper {D-6} {D-2})
    (for i from  {D-4} to {D+4} (entity-new-pullable-ensw i {D-2}))
    (entity-new-stopper  {D+6} {D-2})

    ; 6. row
    (entity-new-stopper {D-6} {D-1})
    (for i from  {D-3} to {D+3} (entity-new-pullable-ensw i {D-1}))
    (entity-new-stopper {D+6} {D-1})

    ; 7. row
    (entity-new-stopper        {D-6} {D+0})
    (entity-new-pullable-ensw  {D-2} {D+0})
    (entity-new-pullable-ensw  {D-1} {D+0})
    (entity-new-exit           {D+0} {D+0})
    (entity-new-pullable-ensw  {D+1} {D+0})
    (entity-new-pullable-ensw  {D+2} {D+0})
    (entity-new-stopper        {D+6} {D+0})

    ; 8. row
    (entity-new-stopper {D-6} {D+1})
    (for i from  {D-3} to {D+3} (entity-new-pullable-ensw i {D+1}))
    (entity-new-stopper {D+6} {D+1})

    ; 9. row
    (entity-new-stopper {D-6} {D+2})
    (for i from  {D-4} to {D+4} (entity-new-pullable-ensw i {D+2}))
    (entity-new-stopper {D+6} {D+2})

    ; 10. row
    (entity-new-stopper       {D-6} {D+3})
    (entity-new-pullable-ensw {D-4} {D+3})
    (entity-new-toggle        {D-3} {D+3})
    (entity-new-pullable-ensw {D-2} {D+3})
    (entity-new-pullable-ensw {D-1} {D+3})
    (entity-new-pullable-ensw {D+1} {D+3})
    (entity-new-pullable-ensw {D+2} {D+3})
    (entity-new-toggle        {D+3} {D+3})
    (entity-new-pullable-ensw {D+4} {D+3})
    (entity-new-stopper       {D+6} {D+3})

    ; 11. row
    (entity-new-stopper {D-6} {D+4})
    (for i from {D-4} to {D-2} (entity-new-pullable-ensw i {D+4}))
    (for i from {D+2} to {D+4} (entity-new-pullable-ensw i {D+4}))
    (entity-new-stopper  {D+6} {D+4})

    ; 12. ro
    (entity-new-stopper {D-6} {D+5})
    (entity-new-stopper {D+6} {D+5})

    ; 13. row
    (for i from {D-6} to {D+6} (entity-new-stopper i  {D+6}))

    ; Bottom row
    (entity-new-player  {D+0} {D+8}))



) [levels])

(define number-of-levels as (fn () (len levels)) [number of levels] '() howto-ok)

(define level-load as (fn (levelNumber)
    (define f as (ln@ levels (- levelNumber {D+1})) [f])
    ((eval f))
    (= level-current-number levelNumber))
  [load level from vector index] '(levelNumber [1..n]) howto-no)

(define level-restart as (fn ()
    (level-reset)
    (define lnum as level-current-number [level number before change])
    (level-load lnum)
    (shake))
  [restart level] '() howto-no)

(define level-prev as (fn ()
    (level-reset)

    (define lnum as (- level-current-number {D+1}) [level number])

    (if (< lnum {D+1}) (= lnum (number-of-levels)))

    (level-load lnum))
  [previous level] '() howto-no)

(define level-next as (fn ()
    (level-reset)
    (define lnum as (+ level-current-number {D+1}) [level number])
    (if (> lnum (number-of-levels)) (= lnum {D+1}))
    (level-load lnum))
  [next level] '() howto-no)

(define current-state as [intro-tween-in] [current-state])
(define pending-input as '()     [pending input that is not yet handled])

(easing-add 'out-cubic origoX {D+0} {D+800} {D+2} [(state-on-tween-out-done)])

(define pop-input as (fn ()

    (define result as [] [result])

    (if (!= {D+0} (len pending-input))
        (do
            (= result (cp@ pending-input {D+0}))
            (pop-front pending-input)))

    result)
  [pop input] '() howto-no)

(define printlevel as false [printlevel])

(define bomb-update as (fn (slot dt)
    (if (not (find slot 'bomb-started)) (return nil))
    (define name as (find slot 'name) [name])
    (+= (find slot 'bomb-uptime) dt)

    (if (>= (find slot 'bomb-uptime) (find slot 'bomb-original-count))
            (bomb-remove (find slot 'name) (find slot 'x) (find slot 'y)))

    (define tmpSecs as (- (find slot 'bomb-original-count)
                          (to-integer (find slot 'bomb-uptime))) [tmp secs])

    (define curSecs as (find slot 'count) [curret secs])
    (if (== curSecs {D+0}) (do (bomb-remove (find slot 'name)
                                        (find slot 'x)
                                        (find slot 'y)
                                        (return true))))
    (if (== tmpSecs {D+0}) (do (bomb-remove (find slot 'name)
                                        (find slot 'x)
                                        (find slot 'y)
                                        (return true))))

    (if (< tmpSecs curSecs) (do
                                (= slot 'count tmpSecs)
                                (animation-remove (find slot 'name))
                                (animation-add name
                                    (ln@ slot 'sx 'hash)
                                    (ln@ slot 'sy 'hash)
                                    (ln@ slot 'sw 'hash)
                                    (ln@ slot 'sh 'hash)
                                    (ln@ slot 'tx 'hash)
                                    (ln@ slot 'ty 'hash)
                                    (ln@ slot 'tw 'hash)
                                    (ln@ slot 'th 'hash)
                                    []
                                    {D+0}
                                    (vector {D+0} (+ {D+848} (* tmpSecs {D+16})) {D+16} {D+16}   {D+0} {D+0} {D+16} {D+16} {D+0.2}))
                                    (animation-playing name true))))
  [update a bomb] '(slot [slot for the bomb] dt [delta time]) howto-no)

(define stopper-update as (fn (slot dt)
    (if (!= player-x (find slot 'x)) (return nil))
    (if (!= player-y (find slot 'y)) (return nil))
    (set-player-dir nil))
  [update a stopper] '(slot [slot for the stopper] dt [delta time]) howto-no)

(define pullable-anytype-update as (fn (slot dt)
    (define px as (find slot 'x) [px])
    (define py as (find slot 'y) [py])

    (define currentSide as (coords-to-side px py player-x player-y) [current side])

    (= currentSide (reverse-side currentSide))

    (if (!= currentSide (find slot 'player-was-on-side))
        (do (-= level-updatable-indices (find slot 'name)) (return nil)))

    (select
        (== currentSide [u]) (move-pullable-up    px py)
        (== currentSide [d]) (move-pullable-down  px py)
        (== currentSide [l]) (move-pullable-left  px py)
        (== currentSide [r]) (move-pullable-right px py)))
  [update a any pullable type] '(slot [slot for the entity] dt [delta time]) howto-no)




(define tween-level-out as (fn ()
    (easing-add 'in-out-back origoX {D+0} {D+512} {D+2} {D+0.5} [(state-on-tween-out-done)]))
    [tween level out]
  '()  howto-no)



(define state-update as (fn (dt input)

    (if (> level-restart-pending {D+0})
      (do
        (-- level-restart-pending)
        (if (== level-restart-pending {D+0})
          (do
            (= level-restart-pending {D-1})
            (level-restart)
            (return true))
          (return true))))

    (if (> shakeStepsLeft {D+0})
      (do
        (= shakeX (* (mod shakeStepsLeft {D+2}) {D+10}))
        (if (== {D+0} (mod shakeStepsLeft {D+2})) (= shakeX (- shakeX)))
        (-- shakeStepsLeft)))

    (define tmpState as current-state [tmpState])

    (select
        (== [intro-tween-in]   tmpState) (intro-state-tween-in-update   dt input)
        (== [intro]            tmpState) (intro-state-update            dt input)
        (== [intro-tween-out]  tmpState) (intro-state-tween-out-update  dt input)

        (== [ingame-tween-in]  tmpState) (ingame-state-tween-in-update  dt input)
        (== [ingame]           tmpState) (ingame-state-update           dt input)
        (== [ingame-tween-out] tmpState) (ingame-state-tween-out-update dt input)
        (== [ingame-shake]     tmpState) (ingame-state-shake-update     dt input))

    (if printlevel (level-print))

    true)
  [state-update]
  '(dt [delta time] input [string telling the input, if any: u, d, l, r]) howto-no)

(define entity-render as (fn (entity dt always)

    (if (and (not always) (== (ln@ entity 'name 'hash) [])) (return))

    (define x  as (ln@ entity 'x  'hash) [tx])
    (define y  as (ln@ entity 'y  'hash) [ty])

    (define tx as (ln@ entity 'tx 'hash) [tx])
    (define ty as (ln@ entity 'ty 'hash) [ty])

    (sdl2-RenderCopy
      renderer
      texture
      (vector
        (ln@ entity 'sx 'hash)
        (ln@ entity 'sy 'hash)
        (ln@ entity 'sw 'hash)
        (ln@ entity 'sh 'hash))
      (vector
        (+ (+ origoX (* (+ x tx) {D+16})) shakeX)
        (+ origoY (* (+ y ty) {D+16}))
        (ln@ entity 'tw 'hash)
        (ln@ entity 'th 'hash))))
  [render one entity]
  '(entity [entity] dt [delta time] always [don't check the slot]) howto-no)





;========================================= INTRO STATES ============================================
;--------------------------------------------tween in-----------------------------------------------
(define intro-state-tween-in-render as (fn (dt)
 (sdl2-RenderCopy
      renderer
      texture
      '({D+1568} {D+0} {D+480} {D+417})
      (vector origoX (- origoY {D+208}) {D+480} {D+417})))
  [intro-state-tween-in-render]
  '(dt [delta time]) howto-no)

(define intro-state-tween-in-update as (fn (dt input)
    (= origoX (- {D+880} origoX)))
  [intro-state-tween-in-update]
  '(dt [delta time] input [string telling the input, if any: u, d, l, r]) howto-no)
;---------------------------------------------------------------------------------------------------
;----------------------------------------------intro------------------------------------------------
(define intro-state-render as (fn (dt)
 (sdl2-RenderCopy
      renderer
      texture
      '({D+1568} {D+0} {D+480} {D+417})
      (vector (- {D+880} origoX) (- origoY {D+208}) {D+480} {D+417})))
  [intro-state-render]
  '(dt [delta time]) howto-no)

(define intro-state-update as (fn (dt input)
    (if (== input [right])
        (do (= current-state [intro-tween-out])
            (easing-add 'in-cubic origoX {D+800} {D+1360} {D+2} [(state-on-tween-out-done)]))))
  [intro-state-update]
  '(dt [delta time] input [string telling the input, if any: u, d, l, r]) howto-no)
;---------------------------------------------------------------------------------------------------
;--------------------------------------------tween out----------------------------------------------
(define intro-state-tween-out-render as (fn (dt)
 (sdl2-RenderCopy
      renderer
      texture
      '({D+1568} {D+0} {D+480} {D+417})
      (vector (- {D+880} origoX) (- origoY {D+208}) {D+480} {D+417})))
  [intro-state-tween-out-render]
  '(dt [delta time]) howto-no)

(define intro-state-tween-out-update as (fn (dt input)
    true)
  [intro-state-tween-out-update]
  '(dt [delta time] input [string telling the input, if any: u, d, l, r]) howto-no)
;---------------------------------------------------------------------------------------------------
;======================================== INGAME STATES ============================================
;--------------------------------------------tween in-----------------------------------------------
(define ingame-state-tween-in-render as (fn (dt)
    ;(= origoX (-  256 origoX))
    (for entity in level
         (entity-render entity dt false))
    (for entity in pass-counters
         (entity-render (ln@ entity {D+1}) dt true)))
  [ingame-state-tween-in-render]
  '(dt [delta time]) howto-no)

(define ingame-state-tween-in-update as (fn (dt input)
    (= origoX (- {D+480} origoX)))
  [ingame-state-tween-in-update]
  '(dt [delta time] input [string telling the input, if any: u, d, l, r]) howto-no)
;---------------------------------------------------------------------------------------------------
;----------------------------------------------ingame-----------------------------------------------
(define ingame-state-render as (fn (dt)
    (for entity in level
         (entity-render entity dt false))
    (for entity in pass-counters
         (entity-render (ln@ entity {D+1}) dt true)))
  [ingame-state-render]
  '(dt [delta time]) howto-no)

(define ingame-state-update as (fn (dt input)
    (select
        (== input [restart])   (do (= input []) (level-restart))
        (== input [prevLevel]) (do (= input []) (level-prev))
        (== input [nextLevel]) (do (= input []) (level-next))
        (== input [action 1])  (do (= input []) (= printlevel (not printlevel))))

    (if (!= input []) (+= pending-input input))

    (if (== nil player-x)     (return nil))
    (if (== nil player-y)     (return nil))
    (if (== nil (get-player)) (return nil))

    (if (== (find (get-player) 'dir) nil)
        (do
            (= input (pop-input))
            (select
                (== input [up])       (= (get-player) 'dir [u])
                (== input [down])     (= (get-player) 'dir [d])
                (== input [left])     (= (get-player) 'dir [l])
                (== input [right])    (= (get-player) 'dir [r]))))

    (define player-dir as (find (get-player) 'dir) [player-dir])

    (select
        (== player-dir [u]) (move-player-to player-x       (- player-y {D+1}))
        (== player-dir [d]) (move-player-to player-x       (+ player-y {D+1}))
        (== player-dir [l]) (move-player-to (- player-x {D+1}) player-y)
        (== player-dir [r]) (move-player-to (+ player-x {D+1}) player-y))

    (if pass-or-fail-level-pending (do (pass-or-fail-level) (return true)))

    (define tmpPassCounters as nil [prevent problems of modifying during iteration])
    (= tmpPassCounters pass-counters)
    (for i in tmpPassCounters
        (pass-counter-update (ln@ i {D+1}) dt))

    (define tmpLUI as nil [prevent problems of modifying during iteration])
    (= tmpLUI level-updatable-indices)
    (for i in tmpLUI
        (define zeroth as (ln@ i {D+0}) [zeroth])
        (select
            (starts-with? zeroth [bomb])          (bomb-update             (ln@ i {D+1}) dt)
            (starts-with? zeroth [stopper])       (stopper-update          (ln@ i {D+1}) dt)
            (starts-with? zeroth [pullable-])     (pullable-anytype-update (ln@ i {D+1}) dt)))

    true)
  [ingame-state-update]
  '(dt [delta time] input [string telling the input, if any: u, d, l, r]) howto-no)
;---------------------------------------------------------------------------------------------------
;--------------------------------------------tween in-----------------------------------------------
(define ingame-state-tween-out-render as (fn (dt)
    (for entity in level
         (entity-render entity dt false)))
  [ingame-state-tween-out-render]
  '(dt [delta time]) howto-no)

(define ingame-state-tween-out-update as (fn (dt input)
    (= origoX (-  {D+256} origoX)))
  [ingame-state-tween-out-update]
  '(dt [delta time] input [string telling the input, if any: u, d, l, r]) howto-no)
;---------------------------------------------------------------------------------------------------
;------------------------------------------------shake----------------------------------------------
(define ingame-state-shake-render as (fn (dt)
    (for entity in level
         (entity-render entity dt false)))
  [ingame-state-tween-shake-render]
  '(dt [delta time]) howto-no)

(define ingame-state-shake-update as (fn (dt input)
    (= origoX (-  {D+256} origoX)))
  [ingame-state-tween-shake-update]
  '(dt [delta time] input [string telling the input, if any: u, d, l, r]) howto-no)
;---------------------------------------------------------------------------------------------------



(define state-render as (fn (dt)
    (sdl2-RenderClear renderer)
    (select
        (== [intro-tween-in]   current-state) (intro-state-tween-in-render   dt)
        (== [intro]            current-state) (intro-state-render            dt)
        (== [intro-tween-out]  current-state) (intro-state-tween-out-render  dt)

        (== [ingame-tween-in]  current-state) (ingame-state-tween-in-render  dt)
        (== [ingame]           current-state) (ingame-state-render           dt)
        (== [ingame-tween-out] current-state) (ingame-state-tween-out-render dt)
        (== [ingame-shake]     current-state) (ingame-state-shake-render     dt))
    (sdl2-RenderPresent renderer))
  [state-render]
  '(dt [delta time]) howto-no)

(define state-on-tween-out-done as (fn ()
    (define tmpState as current-state [tmpState])
    (select
      (== [intro-tween-in]  tmpState) (= current-state [intro])
      (== [intro-tween-out] tmpState) (do
        (level-load {D+1})
        (= current-state [ingame-tween-in])
        (easing-add 'out-cubic origoX {D+0} {D+480} {D+2} [(state-on-tween-in-done)]))
      (== [ingame-tween-in]  tmpState) (= current-state [ingame])
      (== [ingame-tween-out]  tmpState)
          (do
                (level-reset)
                (define lnum as (+ level-current-number {D+1}) [level number])
                (= current-state [ingame-tween-out])
                (level-load lnum)
                (= current-state [ingame-tween-in])
                (easing-add 'out-cubic origoX {D+0} {D+430} {D+1.25} [(state-on-tween-in-done)]))))
  [...] '() howto-no)

(define state-on-tween-in-done as (fn ()
    (define tmpState as current-state [tmpState])
    (select
      (== [ingame-tween-in] tmpState) (do (= current-state [ingame]) (= origoX {D+320}))))
  [...] '() howto-no)

(define running             as true                  [running])
(define targetFPS           as {D+20}                [target FPS])
(define targetFrameDuration as (/ {D+1.0} targetFPS) [time for a frame to last])

(define dt as targetFrameDuration [delta time])

(while running
       (sdl2-TimerReset)

       (define event as (sdl2-PollEvent) [event from sdl2])
       (define type  as nil              [type of event])
       (if (and (!= event nil) (> (len event) {D+0})) (= type (ln@ event {D+0})))
       (define input as [] [input event]) ; TODO

       (select (== type 'QUIT)          (= running false)
               (== type 'JOYBUTTONDOWN) (println [Joystick button {} pressed] (ln@ event {D+1}))
               (== type 'JOYAXIS)       (println [Joystick axis   {}]         (ln@ event {D+1}))
               (== type 'KEYDOWN)       (do
                                          (if (== (ln@ event {D+1}) [UP])    (= input [up]))
                                          (if (== (ln@ event {D+1}) [DOWN])  (= input [down]))
                                          (if (== (ln@ event {D+1}) [LEFT])  (if (== (ln@ event {D+2}) [KMOD_LCTRL]) (= input [prevLevel]) (= input [left])))
                                          (if (== (ln@ event {D+1}) [RIGHT]) (if (== (ln@ event {D+2}) [KMOD_LCTRL]) (= input [nextLevel]) (= input [right])))
                                          (if (== (ln@ event {D+1}) [j])     (= input [down]))
                                          (if (== (ln@ event {D+1}) [k])     (= input [up]))
                                          (if (== (ln@ event {D+1}) [r])     (= input [restart]))
                                          (if (== (ln@ event {D+1}) [q])     (= running false))
                                          (if (== (ln@ event {D+1}) [h])     (if (== (ln@ event {D+2}) [KMOD_LCTRL]) (= input [prevLevel]) (= input [left])))
                                          (if (== (ln@ event {D+1}) [l])     (if (== (ln@ event {D+2}) [KMOD_LCTRL]) (= input [nextLevel]) (= input [right])))
                                          ))
       (easing-update    dt)
       (state-update     dt input)
       (animation-update dt)
       (state-render     dt)

       (if (> targetFrameDuration dt)
         (do
           (define delayInSeconds as (- targetFrameDuration dt) [time to sleep])
           (if (> delayInSeconds {D+0})
             (sdl2-Delay delayInSeconds))))

       (sdl2-TimerUpdate)
       (= dt (sdl2-TimerGetSeconds)))

(sdl2-Quit)


