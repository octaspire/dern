(require 'dern_sdl2)
(require 'dern_chipmunk)

(sdl2-Init 'VIDEO)

(define window   as (sdl2-CreateWindow [octaspire-maze] 'CENTERED 'CENTERED {D+640} {D+640}) [window])
(define renderer as (sdl2-CreateRenderer window {D-1} 'SOFTWARE) [renderer])

(sdl2-glClearColor {D+0} {D+0} {D+0} {D+1})
(sdl2-gl-ortho-enter {D+640} {D+640})

(define space   as (chipmunk-cpSpaceNew)        [Chipmunk space])
(define gravity as (chipmunk-cpv {D+0} {D-100}) [Gravity vector])
(chipmunk-cpSpaceSetGravity space gravity)

(define ball    as (chipmunk-cpBodyNew {D+1} {D+1})      [a body])
(chipmunk-cpSpaceAddBody space ball)
(chipmunk-cpBodySetPosition ball    (chipmunk-cpv {D+0}  {D+15}))
(define ballShape as
  (chipmunk-cpCircleShapeNew ball {D+1.0} (chipmunk-cpv {D+0} {D+0}))
  [ball collision shape])
(chipmunk-cpShapeSetFriction ballShape {D+1})
(chipmunk-cpSpaceAddShape space ballShape)

(define ground as (chipmunk-cpSpaceGetStaticBody space) [the ground])
(define groundShape as
  (chipmunk-cpSegmentShapeNew ground (chipmunk-cpv {D-20} {D+5}) (chipmunk-cpv {D+20} {D-5}) {D+0})
  [collision shape for the ground])
(chipmunk-cpShapeSetFriction groundShape {D+1})
(chipmunk-cpSpaceAddShape space groundShape)

(chipmunk-cpSpaceAddWildCardHandler
 space
 {D+1}
 (fn (bodyA bodyB normal firstContact totalKE) (println [-bodyA: {} -bodyB: {} -normal: {} -firstContact: {} -totalKE: {}] bodyA bodyB normal firstContact totalKE) [todo])
 (fn (bodyA bodyB normal firstContact totalKE) (println [-bodyA: {} -bodyB: {} -normal: {} -firstContact: {} -totalKE: {}] bodyA bodyB normal firstContact totalKE) [todo]))

(define running             as true                  [is running or not])
(define targetFPS           as {D+100}                [target FPS])
(define targetFrameDuration as (/ {D+1.0} targetFPS) [time for a frame to last])
(define origoX              as {D+256}               [X-coordinate of center for drawing])
(define origoY              as {D+256}               [Y-coordinate of center for drawing])

(define render as (fn ()
        (define ballpos as (chipmunk-cpBodyGetPosition ball) [position of the ball])
        (define ballx   as (+ {D+320} (* {D+10} (chipmunk-cpv-get-x ballpos))) [x component])
        (define bally   as (+ {D+320} (* {D+10} (chipmunk-cpv-get-y ballpos))) [y component])
        (sdl2-glClear)
        (sdl2-gl-ortho-circle-rotated ballx bally {D+10} {D+32} (chipmunk-cpBodyGetAngle ball))
        (sdl2-gl-ortho-line
           (+ {D+320} (* {D+10} {D-20}))
           (+ {D+320} (* {D+10} {D+5}))
           (+ {D+320} (* {D+10} {D+20}))
           (+ {D+320} (* {D+10} {D-5})))
        (sdl2-GL-SwapWindow window))
    [render]
    '()
    howto-ok)

(while running
       (sdl2-TimerUpdate)
       (define dt as (sdl2-TimerGetSeconds) [dt])
       (sdl2-TimerReset)
       (render)
       (define event as (sdl2-PollEvent) [event from sdl2])
       (define type  as nil [type of event])
       (if (and (!= event nil) (> (len event) {D+0})) (= type (ln@ event {D+0})))
       (select (== type 'QUIT)          (= running false))

       ;(chipmunk-cpSpaceStep space targetFrameDuration)
       (chipmunk-cpSpaceStep space {D+0.01})

       (sdl2-TimerUpdate)
       (define currentFrameDuration as (sdl2-TimerGetSeconds) [current frame duration])
       (if (> targetFrameDuration currentFrameDuration)
           (do
               (define delayInSeconds as (- targetFrameDuration currentFrameDuration) [time to sleep])
               (if (> delayInSeconds {D+0})
                   (sdl2-Delay delayInSeconds)))))

(sdl2-Quit)

(println [===============|newline|ball position is {} and angle is {}]
         (chipmunk-cpBodyGetPosition ball)
         (chipmunk-cpBodyGetAngle ball))
